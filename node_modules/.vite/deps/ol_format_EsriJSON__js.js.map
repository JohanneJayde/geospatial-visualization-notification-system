{
  "version": 3,
  "sources": ["../../ol/format/EsriJSON.js"],
  "sourcesContent": ["/**\n * @module ol/format/EsriJSON\n */\nimport Feature from '../Feature.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport LinearRing from '../geom/LinearRing.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {assert} from '../asserts.js';\nimport {containsExtent} from '../extent.js';\nimport {deflateCoordinates} from '../geom/flat/deflate.js';\nimport {get as getProjection} from '../proj.js';\nimport {isEmpty} from '../obj.js';\nimport {linearRingIsClockwise} from '../geom/flat/orient.js';\nimport {transformGeometryWithOptions} from './Feature.js';\n\n/**\n * @typedef {import(\"arcgis-rest-api\").Feature} EsriJSONFeature\n * @typedef {import(\"arcgis-rest-api\").FeatureSet} EsriJSONFeatureSet\n * @typedef {import(\"arcgis-rest-api\").Geometry} EsriJSONGeometry\n * @typedef {import(\"arcgis-rest-api\").Point} EsriJSONPoint\n * @typedef {import(\"arcgis-rest-api\").Polyline} EsriJSONPolyline\n * @typedef {import(\"arcgis-rest-api\").Polygon} EsriJSONPolygon\n * @typedef {import(\"arcgis-rest-api\").Multipoint} EsriJSONMultipoint\n * @typedef {import(\"arcgis-rest-api\").HasZM} EsriJSONHasZM\n * @typedef {import(\"arcgis-rest-api\").Position} EsriJSONPosition\n * @typedef {import(\"arcgis-rest-api\").SpatialReferenceWkid} EsriJSONSpatialReferenceWkid\n */\n\n/**\n * @typedef {Object} EsriJSONMultiPolygon\n * @property {Array<Array<Array<Array<number>>>>} rings Rings for the MultiPolygon.\n * @property {boolean} [hasM] If the polygon coordinates have an M value.\n * @property {boolean} [hasZ] If the polygon coordinates have a Z value.\n * @property {EsriJSONSpatialReferenceWkid} [spatialReference] The coordinate reference system.\n */\n\n/**\n * @const\n * @type {Object<import(\"../geom/Geometry.js\").Type, function(EsriJSONGeometry): import(\"../geom/Geometry.js\").default>}\n */\nconst GEOMETRY_READERS = {\n  Point: readPointGeometry,\n  LineString: readLineStringGeometry,\n  Polygon: readPolygonGeometry,\n  MultiPoint: readMultiPointGeometry,\n  MultiLineString: readMultiLineStringGeometry,\n  MultiPolygon: readMultiPolygonGeometry,\n};\n\n/**\n * @const\n * @type {Object<import(\"../geom/Geometry.js\").Type, function(import(\"../geom/Geometry.js\").default, import(\"./Feature.js\").WriteOptions=): (EsriJSONGeometry)>}\n */\nconst GEOMETRY_WRITERS = {\n  Point: writePointGeometry,\n  LineString: writeLineStringGeometry,\n  Polygon: writePolygonGeometry,\n  MultiPoint: writeMultiPointGeometry,\n  MultiLineString: writeMultiLineStringGeometry,\n  MultiPolygon: writeMultiPolygonGeometry,\n};\n\n/**\n * @typedef {Object} Options\n * @property {string} [geometryName] Geometry name to use when creating features.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the EsriJSON format.\n *\n * @api\n */\nclass EsriJSON extends JSONFeature {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super();\n\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @param {string} [idField] Name of the field where to get the id from.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromObject(object, options, idField) {\n    const esriJSONFeature = /** @type {EsriJSONFeature} */ (object);\n    const geometry = readGeometry(esriJSONFeature.geometry, options);\n    const feature = new Feature();\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    }\n    feature.setGeometry(geometry);\n    if (esriJSONFeature.attributes) {\n      feature.setProperties(esriJSONFeature.attributes, true);\n      const id = esriJSONFeature.attributes[idField];\n      if (id !== undefined) {\n        feature.setId(/** @type {number} */ (id));\n      }\n    }\n    return feature;\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n  readFeaturesFromObject(object, options) {\n    options = options ? options : {};\n    if (object['features']) {\n      const esriJSONFeatureSet = /** @type {EsriJSONFeatureSet} */ (object);\n      /** @type {Array<import(\"../Feature.js\").default>} */\n      const features = [];\n      const esriJSONFeatures = esriJSONFeatureSet.features;\n      for (let i = 0, ii = esriJSONFeatures.length; i < ii; ++i) {\n        features.push(\n          this.readFeatureFromObject(\n            esriJSONFeatures[i],\n            options,\n            object.objectIdFieldName\n          )\n        );\n      }\n      return features;\n    } else {\n      return [this.readFeatureFromObject(object, options)];\n    }\n  }\n\n  /**\n   * @param {EsriJSONGeometry} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromObject(object, options) {\n    return readGeometry(object, options);\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromObject(object) {\n    if (\n      object['spatialReference'] &&\n      object['spatialReference']['wkid'] !== undefined\n    ) {\n      const spatialReference = /** @type {EsriJSONSpatialReferenceWkid} */ (\n        object['spatialReference']\n      );\n      const crs = spatialReference.wkid;\n      return getProjection('EPSG:' + crs);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Encode a geometry as a EsriJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {EsriJSONGeometry} Object.\n   * @api\n   */\n  writeGeometryObject(geometry, options) {\n    return writeGeometry(geometry, this.adaptOptions(options));\n  }\n\n  /**\n   * Encode a feature as a esriJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   * @api\n   */\n  writeFeatureObject(feature, options) {\n    options = this.adaptOptions(options);\n    const object = {};\n    if (!feature.hasProperties()) {\n      object['attributes'] = {};\n      return object;\n    }\n    const properties = feature.getProperties();\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      object['geometry'] = writeGeometry(geometry, options);\n      const projection =\n        options && (options.dataProjection || options.featureProjection);\n      if (projection) {\n        object['geometry']['spatialReference'] =\n          /** @type {EsriJSONSpatialReferenceWkid} */ ({\n            wkid: Number(getProjection(projection).getCode().split(':').pop()),\n          });\n      }\n      delete properties[feature.getGeometryName()];\n    }\n    if (!isEmpty(properties)) {\n      object['attributes'] = properties;\n    } else {\n      object['attributes'] = {};\n    }\n    return object;\n  }\n\n  /**\n   * Encode an array of features as a EsriJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {EsriJSONFeatureSet} EsriJSON Object.\n   * @api\n   */\n  writeFeaturesObject(features, options) {\n    options = this.adaptOptions(options);\n    const objects = [];\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], options));\n    }\n    return {\n      'features': objects,\n    };\n  }\n}\n\n/**\n * @param {EsriJSONGeometry} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, options) {\n  if (!object) {\n    return null;\n  }\n  /** @type {import(\"../geom/Geometry.js\").Type} */\n  let type;\n  if (typeof object['x'] === 'number' && typeof object['y'] === 'number') {\n    type = 'Point';\n  } else if (object['points']) {\n    type = 'MultiPoint';\n  } else if (object['paths']) {\n    const esriJSONPolyline = /** @type {EsriJSONPolyline} */ (object);\n    if (esriJSONPolyline.paths.length === 1) {\n      type = 'LineString';\n    } else {\n      type = 'MultiLineString';\n    }\n  } else if (object['rings']) {\n    const esriJSONPolygon = /** @type {EsriJSONPolygon} */ (object);\n    const layout = getGeometryLayout(esriJSONPolygon);\n    const rings = convertRings(esriJSONPolygon.rings, layout);\n    if (rings.length === 1) {\n      type = 'Polygon';\n      object = Object.assign({}, object, {['rings']: rings[0]});\n    } else {\n      type = 'MultiPolygon';\n      object = Object.assign({}, object, {['rings']: rings});\n    }\n  }\n  const geometryReader = GEOMETRY_READERS[type];\n  return transformGeometryWithOptions(geometryReader(object), false, options);\n}\n\n/**\n * Determines inner and outer rings.\n * Checks if any polygons in this array contain any other polygons in this\n * array. It is used for checking for holes.\n * Logic inspired by: https://github.com/Esri/terraformer-arcgis-parser\n * @param {Array<!Array<!Array<number>>>} rings Rings.\n * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout Geometry layout.\n * @return {Array<!Array<!Array<!Array<number>>>>} Transformed rings.\n */\nfunction convertRings(rings, layout) {\n  const flatRing = [];\n  const outerRings = [];\n  const holes = [];\n  let i, ii;\n  for (i = 0, ii = rings.length; i < ii; ++i) {\n    flatRing.length = 0;\n    deflateCoordinates(flatRing, 0, rings[i], layout.length);\n    // is this ring an outer ring? is it clockwise?\n    const clockwise = linearRingIsClockwise(\n      flatRing,\n      0,\n      flatRing.length,\n      layout.length\n    );\n    if (clockwise) {\n      outerRings.push([rings[i]]);\n    } else {\n      holes.push(rings[i]);\n    }\n  }\n  while (holes.length) {\n    const hole = holes.shift();\n    let matched = false;\n    // loop over all outer rings and see if they contain our hole.\n    for (i = outerRings.length - 1; i >= 0; i--) {\n      const outerRing = outerRings[i][0];\n      const containsHole = containsExtent(\n        new LinearRing(outerRing).getExtent(),\n        new LinearRing(hole).getExtent()\n      );\n      if (containsHole) {\n        // the hole is contained push it into our polygon\n        outerRings[i].push(hole);\n        matched = true;\n        break;\n      }\n    }\n    if (!matched) {\n      // no outer rings contain this hole turn it into and outer\n      // ring (reverse it)\n      outerRings.push([hole.reverse()]);\n    }\n  }\n  return outerRings;\n}\n\n/**\n * @param {EsriJSONPoint} object Object.\n * @return {import(\"../geom/Geometry.js\").default} Point.\n */\nfunction readPointGeometry(object) {\n  let point;\n  if (object.m !== undefined && object.z !== undefined) {\n    point = new Point([object.x, object.y, object.z, object.m], 'XYZM');\n  } else if (object.z !== undefined) {\n    point = new Point([object.x, object.y, object.z], 'XYZ');\n  } else if (object.m !== undefined) {\n    point = new Point([object.x, object.y, object.m], 'XYM');\n  } else {\n    point = new Point([object.x, object.y]);\n  }\n  return point;\n}\n\n/**\n * @param {EsriJSONPolyline} object Object.\n * @return {import(\"../geom/Geometry.js\").default} LineString.\n */\nfunction readLineStringGeometry(object) {\n  const layout = getGeometryLayout(object);\n  return new LineString(object.paths[0], layout);\n}\n\n/**\n * @param {EsriJSONPolyline} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n  const layout = getGeometryLayout(object);\n  return new MultiLineString(object.paths, layout);\n}\n\n/**\n * @param {EsriJSONHasZM} object Object.\n * @return {import(\"../geom/Geometry.js\").GeometryLayout} The geometry layout to use.\n */\nfunction getGeometryLayout(object) {\n  /** @type {import(\"../geom/Geometry.js\").GeometryLayout} */\n  let layout = 'XY';\n  if (object.hasZ === true && object.hasM === true) {\n    layout = 'XYZM';\n  } else if (object.hasZ === true) {\n    layout = 'XYZ';\n  } else if (object.hasM === true) {\n    layout = 'XYM';\n  }\n  return layout;\n}\n\n/**\n * @param {EsriJSONMultipoint} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n  const layout = getGeometryLayout(object);\n  return new MultiPoint(object.points, layout);\n}\n\n/**\n * @param {EsriJSONMultiPolygon} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n  const layout = getGeometryLayout(object);\n  return new MultiPolygon(object.rings, layout);\n}\n\n/**\n * @param {EsriJSONPolygon} object Object.\n * @return {import(\"../geom/Geometry.js\").default} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  const layout = getGeometryLayout(object);\n  return new Polygon(object.rings, layout);\n}\n\n/**\n * @param {import(\"../geom/Point.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONPoint} EsriJSON geometry.\n */\nfunction writePointGeometry(geometry, options) {\n  const coordinates = geometry.getCoordinates();\n  /** @type {EsriJSONPoint} */\n  let esriJSON;\n  const layout = geometry.getLayout();\n  if (layout === 'XYZ') {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n      z: coordinates[2],\n    };\n  } else if (layout === 'XYM') {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n      m: coordinates[2],\n    };\n  } else if (layout === 'XYZM') {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n      z: coordinates[2],\n      m: coordinates[3],\n    };\n  } else if (layout === 'XY') {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n    };\n  } else {\n    assert(false, 34); // Invalid geometry layout\n  }\n  return esriJSON;\n}\n\n/**\n * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @return {Object} Object with boolean hasZ and hasM keys.\n */\nfunction getHasZM(geometry) {\n  const layout = geometry.getLayout();\n  return {\n    hasZ: layout === 'XYZ' || layout === 'XYZM',\n    hasM: layout === 'XYM' || layout === 'XYZM',\n  };\n}\n\n/**\n * @param {import(\"../geom/LineString.js\").default} lineString Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONPolyline} EsriJSON geometry.\n */\nfunction writeLineStringGeometry(lineString, options) {\n  const hasZM = getHasZM(lineString);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    paths: [\n      /** @type {Array<EsriJSONPosition>} */ (lineString.getCoordinates()),\n    ],\n  };\n}\n\n/**\n * @param {import(\"../geom/Polygon.js\").default} polygon Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONPolygon} EsriJSON geometry.\n */\nfunction writePolygonGeometry(polygon, options) {\n  // Esri geometries use the left-hand rule\n  const hasZM = getHasZM(polygon);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    rings: /** @type {Array<Array<EsriJSONPosition>>} */ (\n      polygon.getCoordinates(false)\n    ),\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiLineString.js\").default} multiLineString Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONPolyline} EsriJSON geometry.\n */\nfunction writeMultiLineStringGeometry(multiLineString, options) {\n  const hasZM = getHasZM(multiLineString);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    paths: /** @type {Array<Array<EsriJSONPosition>>} */ (\n      multiLineString.getCoordinates()\n    ),\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiPoint.js\").default} multiPoint Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONMultipoint} EsriJSON geometry.\n */\nfunction writeMultiPointGeometry(multiPoint, options) {\n  const hasZM = getHasZM(multiPoint);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    points: /** @type {Array<EsriJSONPosition>} */ (\n      multiPoint.getCoordinates()\n    ),\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONPolygon} EsriJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, options) {\n  const hasZM = getHasZM(geometry);\n  const coordinates = geometry.getCoordinates(false);\n  const output = [];\n  for (let i = 0; i < coordinates.length; i++) {\n    for (let x = coordinates[i].length - 1; x >= 0; x--) {\n      output.push(coordinates[i][x]);\n    }\n  }\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    rings: /** @type {Array<Array<EsriJSONPosition>>} */ (output),\n  };\n}\n\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONGeometry} EsriJSON geometry.\n */\nfunction writeGeometry(geometry, options) {\n  const geometryWriter = GEOMETRY_WRITERS[geometry.getType()];\n  return geometryWriter(\n    transformGeometryWithOptions(geometry, true, options),\n    options\n  );\n}\n\nexport default EsriJSON;\n"],
  "mappings": "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",
  "names": []
}
