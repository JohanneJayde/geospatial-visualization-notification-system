{
  "version": 3,
  "sources": ["../../proj4/lib/common/pj_enfn.js", "../../proj4/lib/common/pj_mlfn.js", "../../proj4/lib/constants/values.js", "../../proj4/lib/common/pj_inv_mlfn.js", "../../proj4/lib/common/sign.js", "../../proj4/lib/common/adjust_lon.js", "../../proj4/lib/projections/tmerc.js", "../../proj4/lib/common/sinh.js", "../../proj4/lib/common/hypot.js", "../../proj4/lib/common/log1py.js", "../../proj4/lib/common/asinhy.js", "../../proj4/lib/common/gatg.js", "../../proj4/lib/common/clens.js", "../../proj4/lib/common/cosh.js", "../../proj4/lib/common/clens_cmplx.js", "../../proj4/lib/projections/etmerc.js", "../../proj4/lib/common/adjust_zone.js", "../../proj4/lib/projections/utm.js", "../../proj4/lib/common/srat.js", "../../proj4/lib/projections/gauss.js", "../../proj4/lib/projections/sterea.js", "../../proj4/lib/common/msfnz.js", "../../proj4/lib/common/tsfnz.js", "../../proj4/lib/common/phi2z.js", "../../proj4/lib/projections/stere.js", "../../proj4/lib/projections/somerc.js", "../../proj4/lib/projections/omerc.js", "../../proj4/lib/projections/lcc.js", "../../proj4/lib/projections/krovak.js", "../../proj4/lib/common/mlfn.js", "../../proj4/lib/common/e0fn.js", "../../proj4/lib/common/e1fn.js", "../../proj4/lib/common/e2fn.js", "../../proj4/lib/common/e3fn.js", "../../proj4/lib/common/gN.js", "../../proj4/lib/common/adjust_lat.js", "../../proj4/lib/common/imlfn.js", "../../proj4/lib/projections/cass.js", "../../proj4/lib/common/qsfnz.js", "../../proj4/lib/projections/laea.js", "../../proj4/lib/common/asinz.js", "../../proj4/lib/projections/aea.js", "../../proj4/lib/projections/gnom.js", "../../proj4/lib/common/iqsfnz.js", "../../proj4/lib/projections/cea.js", "../../proj4/lib/projections/eqc.js", "../../proj4/lib/projections/poly.js", "../../proj4/lib/projections/nzmg.js", "../../proj4/lib/projections/mill.js", "../../proj4/lib/projections/sinu.js", "../../proj4/lib/projections/moll.js", "../../proj4/lib/projections/eqdc.js", "../../proj4/lib/projections/vandg.js", "../../proj4/lib/projections/aeqd.js", "../../proj4/lib/projections/ortho.js", "../../proj4/lib/projections/qsc.js", "../../proj4/lib/projections/robin.js", "../../proj4/lib/datumUtils.js", "../../proj4/lib/projections/geocent.js", "../../proj4/lib/projections/tpers.js", "../../proj4/lib/projections/geos.js", "../../proj4/projs.js"],
  "sourcesContent": ["var C00 = 1;\nvar C02 = 0.25;\nvar C04 = 0.046875;\nvar C06 = 0.01953125;\nvar C08 = 0.01068115234375;\nvar C22 = 0.75;\nvar C44 = 0.46875;\nvar C46 = 0.01302083333333333333;\nvar C48 = 0.00712076822916666666;\nvar C66 = 0.36458333333333333333;\nvar C68 = 0.00569661458333333333;\nvar C88 = 0.3076171875;\n\nexport default function(es) {\n  var en = [];\n  en[0] = C00 - es * (C02 + es * (C04 + es * (C06 + es * C08)));\n  en[1] = es * (C22 - es * (C04 + es * (C06 + es * C08)));\n  var t = es * es;\n  en[2] = t * (C44 - es * (C46 + es * C48));\n  t *= es;\n  en[3] = t * (C66 - es * C68);\n  en[4] = t * es * C88;\n  return en;\n}", "export default function(phi, sphi, cphi, en) {\n  cphi *= sphi;\n  sphi *= sphi;\n  return (en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4]))));\n}", "export var PJD_3PARAM = 1;\nexport var PJD_7PARAM = 2;\nexport var PJD_GRIDSHIFT = 3;\nexport var PJD_WGS84 = 4; // WGS84 or equivalent\nexport var PJD_NODATUM = 5; // WGS84 or equivalent\nexport var SRS_WGS84_SEMIMAJOR = 6378137.0;  // only used in grid shift transforms\nexport var SRS_WGS84_SEMIMINOR = 6356752.314;  // only used in grid shift transforms\nexport var SRS_WGS84_ESQUARED = 0.0066943799901413165; // only used in grid shift transforms\nexport var SEC_TO_RAD = 4.84813681109535993589914102357e-6;\nexport var HALF_PI = Math.PI/2;\n// ellipoid pj_set_ell.c\nexport var SIXTH = 0.1666666666666666667;\n/* 1/6 */\nexport var RA4 = 0.04722222222222222222;\n/* 17/360 */\nexport var RA6 = 0.02215608465608465608;\nexport var EPSLN = 1.0e-10;\n// you'd think you could use Number.EPSILON above but that makes\n// Mollweide get into an infinate loop.\n\nexport var D2R = 0.01745329251994329577;\nexport var R2D = 57.29577951308232088;\nexport var FORTPI = Math.PI/4;\nexport var TWO_PI = Math.PI * 2;\n// SPI is slightly greater than Math.PI, so values that exceed the -180..180\n// degree range by a tiny amount don't get wrapped. This prevents points that\n// have drifted from their original location along the 180th meridian (due to\n// floating point error) from changing their sign.\nexport var SPI = 3.14159265359;\n", "import pj_mlfn from \"./pj_mlfn\";\nimport {EPSLN} from '../constants/values';\n\nvar MAX_ITER = 20;\n\nexport default function(arg, es, en) {\n  var k = 1 / (1 - es);\n  var phi = arg;\n  for (var i = MAX_ITER; i; --i) { /* rarely goes over 2 iterations */\n    var s = Math.sin(phi);\n    var t = 1 - es * s * s;\n    //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;\n    //phi -= t * (t * Math.sqrt(t)) * k;\n    t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;\n    phi -= t;\n    if (Math.abs(t) < EPSLN) {\n      return phi;\n    }\n  }\n  //..reportError(\"cass:pj_inv_mlfn: Convergence error\");\n  return phi;\n}\n", "export default function(x) {\n  return x<0 ? -1 : 1;\n}", "\nimport {TWO_PI, SPI} from '../constants/values';\nimport sign from './sign';\n\nexport default function(x) {\n  return (Math.abs(x) <= SPI) ? x : (x - (sign(x) * TWO_PI));\n}\n", "// Heavily based on this tmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/tmerc.js\n\nimport pj_enfn from '../common/pj_enfn';\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport adjust_lon from '../common/adjust_lon';\n\nimport {EPSLN, HALF_PI} from '../constants/values';\nimport sign from '../common/sign';\n\nexport function init() {\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  if (this.es) {\n    this.en = pj_enfn(this.es);\n    this.ml0 = pj_mlfn(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);\n  }\n}\n\n/**\n    Transverse Mercator Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var con;\n  var x, y;\n  var sin_phi = Math.sin(lat);\n  var cos_phi = Math.cos(lat);\n\n  if (!this.es) {\n    var b = cos_phi * Math.sin(delta_lon);\n\n    if ((Math.abs(Math.abs(b) - 1)) < EPSLN) {\n      return (93);\n    }\n    else {\n      x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;\n      y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));\n      b = Math.abs(y);\n\n      if (b >= 1) {\n        if ((b - 1) > EPSLN) {\n          return (93);\n        }\n        else {\n          y = 0;\n        }\n      }\n      else {\n        y = Math.acos(y);\n      }\n\n      if (lat < 0) {\n        y = -y;\n      }\n\n      y = this.a * this.k0 * (y - this.lat0) + this.y0;\n    }\n  }\n  else {\n    var al = cos_phi * delta_lon;\n    var als = Math.pow(al, 2);\n    var c = this.ep2 * Math.pow(cos_phi, 2);\n    var cs = Math.pow(c, 2);\n    var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;\n    var t = Math.pow(tq, 2);\n    var ts = Math.pow(t, 2);\n    con = 1 - this.es * Math.pow(sin_phi, 2);\n    al = al / Math.sqrt(con);\n    var ml = pj_mlfn(lat, sin_phi, cos_phi, this.en);\n\n    x = this.a * (this.k0 * al * (1 +\n      als / 6 * (1 - t + c +\n      als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c +\n      als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) +\n      this.x0;\n\n    y = this.a * (this.k0 * (ml - this.ml0 +\n      sin_phi * delta_lon * al / 2 * (1 +\n      als / 12 * (5 - t + 9 * c + 4 * cs +\n      als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c +\n      als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) +\n      this.y0;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\n/**\n    Transverse Mercator Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var con, phi;\n  var lat, lon;\n  var x = (p.x - this.x0) * (1 / this.a);\n  var y = (p.y - this.y0) * (1 / this.a);\n\n  if (!this.es) {\n    var f = Math.exp(x / this.k0);\n    var g = 0.5 * (f - 1 / f);\n    var temp = this.lat0 + y / this.k0;\n    var h = Math.cos(temp);\n    con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));\n    lat = Math.asin(con);\n\n    if (y < 0) {\n      lat = -lat;\n    }\n\n    if ((g === 0) && (h === 0)) {\n      lon = 0;\n    }\n    else {\n      lon = adjust_lon(Math.atan2(g, h) + this.long0);\n    }\n  }\n  else { // ellipsoidal form\n    con = this.ml0 + y / this.k0;\n    phi = pj_inv_mlfn(con, this.es, this.en);\n\n    if (Math.abs(phi) < HALF_PI) {\n      var sin_phi = Math.sin(phi);\n      var cos_phi = Math.cos(phi);\n      var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;\n      var c = this.ep2 * Math.pow(cos_phi, 2);\n      var cs = Math.pow(c, 2);\n      var t = Math.pow(tan_phi, 2);\n      var ts = Math.pow(t, 2);\n      con = 1 - this.es * Math.pow(sin_phi, 2);\n      var d = x * Math.sqrt(con) / this.k0;\n      var ds = Math.pow(d, 2);\n      con = con * tan_phi;\n\n      lat = phi - (con * ds / (1 - this.es)) * 0.5 * (1 -\n        ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs -\n        ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c -\n        ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));\n\n      lon = adjust_lon(this.long0 + (d * (1 -\n        ds / 6 * (1 + 2 * t + c -\n        ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c -\n        ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi));\n    }\n    else {\n      lat = HALF_PI * sign(y);\n      lon = 0;\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Fast_Transverse_Mercator\", \"Fast Transverse Mercator\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "export default function(x) {\n  var r = Math.exp(x);\n  r = (r - 1 / r) / 2;\n  return r;\n}", "export default function(x, y) {\n  x = Math.abs(x);\n  y = Math.abs(y);\n  var a = Math.max(x, y);\n  var b = Math.min(x, y) / (a ? a : 1);\n\n  return a * Math.sqrt(1 + Math.pow(b, 2));\n}\n", "export default function(x) {\n  var y = 1 + x;\n  var z = y - 1;\n\n  return z === 0 ? x : x * Math.log(y) / z;\n}\n", "import hypot from './hypot';\nimport log1py from './log1py';\n\nexport default function(x) {\n  var y = Math.abs(x);\n  y = log1py(y * (1 + y / (hypot(1, y) + 1)));\n\n  return x < 0 ? -y : y;\n}\n", "export default function(pp, B) {\n  var cos_2B = 2 * Math.cos(2 * B);\n  var i = pp.length - 1;\n  var h1 = pp[i];\n  var h2 = 0;\n  var h;\n\n  while (--i >= 0) {\n    h = -h2 + cos_2B * h1 + pp[i];\n    h2 = h1;\n    h1 = h;\n  }\n\n  return (B + h * Math.sin(2 * B));\n}\n", "export default function(pp, arg_r) {\n  var r = 2 * Math.cos(arg_r);\n  var i = pp.length - 1;\n  var hr1 = pp[i];\n  var hr2 = 0;\n  var hr;\n\n  while (--i >= 0) {\n    hr = -hr2 + r * hr1 + pp[i];\n    hr2 = hr1;\n    hr1 = hr;\n  }\n\n  return Math.sin(arg_r) * hr;\n}\n", "export default function(x) {\n  var r = Math.exp(x);\n  r = (r + 1 / r) / 2;\n  return r;\n}", "import sinh from './sinh';\nimport cosh from './cosh';\n\nexport default function(pp, arg_r, arg_i) {\n  var sin_arg_r = Math.sin(arg_r);\n  var cos_arg_r = Math.cos(arg_r);\n  var sinh_arg_i = sinh(arg_i);\n  var cosh_arg_i = cosh(arg_i);\n  var r = 2 * cos_arg_r * cosh_arg_i;\n  var i = -2 * sin_arg_r * sinh_arg_i;\n  var j = pp.length - 1;\n  var hr = pp[j];\n  var hi1 = 0;\n  var hr1 = 0;\n  var hi = 0;\n  var hr2;\n  var hi2;\n\n  while (--j >= 0) {\n    hr2 = hr1;\n    hi2 = hi1;\n    hr1 = hr;\n    hi1 = hi;\n    hr = -hr2 + r * hr1 - i * hi1 + pp[j];\n    hi = -hi2 + i * hr1 + r * hi1;\n  }\n\n  r = sin_arg_r * cosh_arg_i;\n  i = cos_arg_r * sinh_arg_i;\n\n  return [r * hr - i * hi, r * hi + i * hr];\n}\n", "// Heavily based on this etmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/etmerc.js\n\nimport tmerc from '../projections/tmerc';\nimport sinh from '../common/sinh';\nimport hypot from '../common/hypot';\nimport asinhy from '../common/asinhy';\nimport gatg from '../common/gatg';\nimport clens from '../common/clens';\nimport clens_cmplx from '../common/clens_cmplx';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  if (!this.approx && (isNaN(this.es) || this.es <= 0)) {\n    throw new Error('Incorrect elliptical usage. Try using the +approx option in the proj string, or PROJECTION[\"Fast_Transverse_Mercator\"] in the WKT.');\n  }\n  if (this.approx) {\n    // When '+approx' is set, use tmerc instead\n    tmerc.init.apply(this);\n    this.forward = tmerc.forward;\n    this.inverse = tmerc.inverse;\n  }\n\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  this.cgb = [];\n  this.cbg = [];\n  this.utg = [];\n  this.gtu = [];\n\n  var f = this.es / (1 + Math.sqrt(1 - this.es));\n  var n = f / (2 - f);\n  var np = n;\n\n  this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675 ))))));\n  this.cbg[0] = n * (-2 + n * ( 2 / 3 + n * ( 4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));\n\n  np = np * n;\n  this.cgb[1] = np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));\n  this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * ( -13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));\n\n  np = np * n;\n  this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));\n  this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835))));\n\n  np = np * n;\n  this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));\n  this.cbg[3] = np * (1237 / 630 + n * (-12 / 5 + n * ( -24832 / 14175)));\n\n  np = np * n;\n  this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));\n  this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));\n\n  np = np * n;\n  this.cgb[5] = np * (601676 / 22275);\n  this.cbg[5] = np * (444337 / 155925);\n\n  np = Math.pow(n, 2);\n  this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));\n\n  this.utg[0] = n * (-0.5 + n * ( 2 / 3 + n * (-37 / 96 + n * ( 1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));\n  this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));\n\n  this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));\n  this.gtu[1] = np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));\n\n  np = np * n;\n  this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720 ))));\n  this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));\n\n  np = np * n;\n  this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));\n  this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));\n\n  np = np * n;\n  this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));\n  this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));\n\n  np = np * n;\n  this.utg[5] = np * (-20648693 / 638668800);\n  this.gtu[5] = np * (212378941 / 319334400);\n\n  var Z = gatg(this.cbg, this.lat0);\n  this.Zb = -this.Qn * (Z + clens(this.gtu, 2 * Z));\n}\n\nexport function forward(p) {\n  var Ce = adjust_lon(p.x - this.long0);\n  var Cn = p.y;\n\n  Cn = gatg(this.cbg, Cn);\n  var sin_Cn = Math.sin(Cn);\n  var cos_Cn = Math.cos(Cn);\n  var sin_Ce = Math.sin(Ce);\n  var cos_Ce = Math.cos(Ce);\n\n  Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);\n  Ce = Math.atan2(sin_Ce * cos_Cn, hypot(sin_Cn, cos_Cn * cos_Ce));\n  Ce = asinhy(Math.tan(Ce));\n\n  var tmp = clens_cmplx(this.gtu, 2 * Cn, 2 * Ce);\n\n  Cn = Cn + tmp[0];\n  Ce = Ce + tmp[1];\n\n  var x;\n  var y;\n\n  if (Math.abs(Ce) <= 2.623395162778) {\n    x = this.a * (this.Qn * Ce) + this.x0;\n    y = this.a * (this.Qn * Cn + this.Zb) + this.y0;\n  }\n  else {\n    x = Infinity;\n    y = Infinity;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\nexport function inverse(p) {\n  var Ce = (p.x - this.x0) * (1 / this.a);\n  var Cn = (p.y - this.y0) * (1 / this.a);\n\n  Cn = (Cn - this.Zb) / this.Qn;\n  Ce = Ce / this.Qn;\n\n  var lon;\n  var lat;\n\n  if (Math.abs(Ce) <= 2.623395162778) {\n    var tmp = clens_cmplx(this.utg, 2 * Cn, 2 * Ce);\n\n    Cn = Cn + tmp[0];\n    Ce = Ce + tmp[1];\n    Ce = Math.atan(sinh(Ce));\n\n    var sin_Cn = Math.sin(Cn);\n    var cos_Cn = Math.cos(Cn);\n    var sin_Ce = Math.sin(Ce);\n    var cos_Ce = Math.cos(Ce);\n\n    Cn = Math.atan2(sin_Cn * cos_Ce, hypot(sin_Ce, cos_Ce * cos_Cn));\n    Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);\n\n    lon = adjust_lon(Ce + this.long0);\n    lat = gatg(this.cgb, Cn);\n  }\n  else {\n    lon = Infinity;\n    lat = Infinity;\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Extended_Transverse_Mercator\", \"Extended Transverse Mercator\", \"etmerc\", \"Transverse_Mercator\", \"Transverse Mercator\", \"Gauss Kruger\", \"Gauss_Kruger\", \"tmerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "import adjust_lon from './adjust_lon';\n\nexport default function(zone, lon) {\n  if (zone === undefined) {\n    zone = Math.floor((adjust_lon(lon) + Math.PI) * 30 / Math.PI) + 1;\n\n    if (zone < 0) {\n      return 0;\n    } else if (zone > 60) {\n      return 60;\n    }\n  }\n  return zone;\n}\n", "import adjust_zone from '../common/adjust_zone';\nimport etmerc from './etmerc';\nexport var dependsOn = 'etmerc';\nimport {D2R} from '../constants/values';\n\n\nexport function init() {\n  var zone = adjust_zone(this.zone, this.long0);\n  if (zone === undefined) {\n    throw new Error('unknown utm zone');\n  }\n  this.lat0 = 0;\n  this.long0 =  ((6 * Math.abs(zone)) - 183) * D2R;\n  this.x0 = 500000;\n  this.y0 = this.utmSouth ? 10000000 : 0;\n  this.k0 = 0.9996;\n\n  etmerc.init.apply(this);\n  this.forward = etmerc.forward;\n  this.inverse = etmerc.inverse;\n}\n\nexport var names = [\"Universal Transverse Mercator System\", \"utm\"];\nexport default {\n  init: init,\n  names: names,\n  dependsOn: dependsOn\n};\n", "export default function(esinp, exp) {\n  return (Math.pow((1 - esinp) / (1 + esinp), exp));\n}", "import srat from '../common/srat';\nvar MAX_ITER = 20;\nimport {HALF_PI, FORTPI} from '../constants/values';\n\nexport function init() {\n  var sphi = Math.sin(this.lat0);\n  var cphi = Math.cos(this.lat0);\n  cphi *= cphi;\n  this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);\n  this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));\n  this.phic0 = Math.asin(sphi / this.C);\n  this.ratexp = 0.5 * this.C * this.e;\n  this.K = Math.tan(0.5 * this.phic0 + FORTPI) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI), this.C) * srat(this.e * sphi, this.ratexp));\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI), this.C) * srat(this.e * Math.sin(lat), this.ratexp)) - HALF_PI;\n  p.x = this.C * lon;\n  return p;\n}\n\nexport function inverse(p) {\n  var DEL_TOL = 1e-14;\n  var lon = p.x / this.C;\n  var lat = p.y;\n  var num = Math.pow(Math.tan(0.5 * lat + FORTPI) / this.K, 1 / this.C);\n  for (var i = MAX_ITER; i > 0; --i) {\n    lat = 2 * Math.atan(num * srat(this.e * Math.sin(p.y), - 0.5 * this.e)) - HALF_PI;\n    if (Math.abs(lat - p.y) < DEL_TOL) {\n      break;\n    }\n    p.y = lat;\n  }\n  /* convergence failed */\n  if (!i) {\n    return null;\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"gauss\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "import gauss from './gauss';\nimport adjust_lon from '../common/adjust_lon';\nimport hypot from '../common/hypot';\n\nexport function init() {\n  gauss.init.apply(this);\n  if (!this.rc) {\n    return;\n  }\n  this.sinc0 = Math.sin(this.phic0);\n  this.cosc0 = Math.cos(this.phic0);\n  this.R2 = 2 * this.rc;\n  if (!this.title) {\n    this.title = \"Oblique Stereographic Alternative\";\n  }\n}\n\nexport function forward(p) {\n  var sinc, cosc, cosl, k;\n  p.x = adjust_lon(p.x - this.long0);\n  gauss.forward.apply(this, [p]);\n  sinc = Math.sin(p.y);\n  cosc = Math.cos(p.y);\n  cosl = Math.cos(p.x);\n  k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);\n  p.x = k * cosc * Math.sin(p.x);\n  p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);\n  p.x = this.a * p.x + this.x0;\n  p.y = this.a * p.y + this.y0;\n  return p;\n}\n\nexport function inverse(p) {\n  var sinc, cosc, lon, lat, rho;\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n  if ((rho = hypot(p.x, p.y))) {\n    var c = 2 * Math.atan2(rho, this.R2);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n    lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);\n    lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  gauss.inverse.apply(this, [p]);\n  p.x = adjust_lon(p.x + this.long0);\n  return p;\n}\n\nexport var names = [\"Stereographic_North_Pole\", \"Oblique_Stereographic\", \"sterea\",\"Oblique Stereographic Alternative\",\"Double_Stereographic\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "export default function(eccent, sinphi, cosphi) {\n  var con = eccent * sinphi;\n  return cosphi / (Math.sqrt(1 - con * con));\n}", "import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, phi, sinphi) {\n  var con = eccent * sinphi;\n  var com = 0.5 * eccent;\n  con = Math.pow(((1 - con) / (1 + con)), com);\n  return (Math.tan(0.5 * (HALF_PI - phi)) / con);\n}\n", "import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, ts) {\n  var eccnth = 0.5 * eccent;\n  var con, dphi;\n  var phi = HALF_PI - 2 * Math.atan(ts);\n  for (var i = 0; i <= 15; i++) {\n    con = eccent * Math.sin(phi);\n    dphi = HALF_PI - 2 * Math.atan(ts * (Math.pow(((1 - con) / (1 + con)), eccnth))) - phi;\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n  //console.log(\"phi2z has NoConvergence\");\n  return -9999;\n}\n", "import {EPSLN, HALF_PI} from '../constants/values';\n\nimport sign from '../common/sign';\nimport msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function ssfn_(phit, sinphi, eccen) {\n  sinphi *= eccen;\n  return (Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen));\n}\n\nexport function init() {\n\n  // setting default parameters\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n\n  this.coslat0 = Math.cos(this.lat0);\n  this.sinlat0 = Math.sin(this.lat0);\n  if (this.sphere) {\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));\n    }\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (this.lat0 > 0) {\n        //North pole\n        //trace('stere:north pole');\n        this.con = 1;\n      }\n      else {\n        //South pole\n        //trace('stere:south pole');\n        this.con = -1;\n      }\n    }\n    this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN && Math.abs(Math.cos(this.lat_ts)) > EPSLN) {\n      // When k0 is 1 (default value) and lat_ts is a vaild number and lat0 is at a pole and lat_ts is not at a pole\n      // Recalculate k0 using formula 21-35 from p161 of Snyder, 1987\n      this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));\n    }\n    this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);\n    this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;\n    this.cosX0 = Math.cos(this.X0);\n    this.sinX0 = Math.sin(this.X0);\n  }\n}\n\n// Stereographic forward equations--mapping lat,long to x,y\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinlat = Math.sin(lat);\n  var coslat = Math.cos(lat);\n  var A, X, sinX, cosX, ts, rh;\n  var dlon = adjust_lon(lon - this.long0);\n\n  if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {\n    //case of the origine point\n    //trace('stere:this is the origin point');\n    p.x = NaN;\n    p.y = NaN;\n    return p;\n  }\n  if (this.sphere) {\n    //trace('stere:sphere case');\n    A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));\n    p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;\n    p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;\n    return p;\n  }\n  else {\n    X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;\n    cosX = Math.cos(X);\n    sinX = Math.sin(X);\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      ts = tsfnz(this.e, lat * this.con, this.con * sinlat);\n      rh = 2 * this.a * this.k0 * ts / this.cons;\n      p.x = this.x0 + rh * Math.sin(lon - this.long0);\n      p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);\n      //trace(p.toString());\n      return p;\n    }\n    else if (Math.abs(this.sinlat0) < EPSLN) {\n      //Eq\n      //trace('stere:equateur');\n      A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));\n      p.y = A * sinX;\n    }\n    else {\n      //other case\n      //trace('stere:normal case');\n      A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));\n      p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;\n    }\n    p.x = A * cosX * Math.sin(dlon) + this.x0;\n  }\n  //trace(p.toString());\n  return p;\n}\n\n//* Stereographic inverse equations--mapping x,y to lat/long\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat, ts, ce, Chi;\n  var rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  if (this.sphere) {\n    var c = 2 * Math.atan(rh / (2 * this.a * this.k0));\n    lon = this.long0;\n    lat = this.lat0;\n    if (rh <= EPSLN) {\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);\n    if (Math.abs(this.coslat0) < EPSLN) {\n      if (this.lat0 > 0) {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      }\n      else {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      }\n    }\n    else {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (rh <= EPSLN) {\n        lat = this.lat0;\n        lon = this.long0;\n        p.x = lon;\n        p.y = lat;\n        //trace(p.toString());\n        return p;\n      }\n      p.x *= this.con;\n      p.y *= this.con;\n      ts = rh * this.cons / (2 * this.a * this.k0);\n      lat = this.con * phi2z(this.e, ts);\n      lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, - 1 * p.y));\n    }\n    else {\n      ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));\n      lon = this.long0;\n      if (rh <= EPSLN) {\n        Chi = this.X0;\n      }\n      else {\n        Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));\n      }\n      lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n\n  //trace(p.toString());\n  return p;\n\n}\n\nexport var names = [\"stere\", \"Stereographic_South_Pole\", \"Polar Stereographic (variant B)\", \"Polar_Stereographic\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  ssfn_: ssfn_\n};\n", "/*\n  references:\n    Formules et constantes pour le Calcul pour la\n    projection cylindrique conforme à axe oblique et pour la transformation entre\n    des systèmes de référence.\n    http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf\n  */\n\nexport function init() {\n  var phy0 = this.lat0;\n  this.lambda0 = this.long0;\n  var sinPhy0 = Math.sin(phy0);\n  var semiMajorAxis = this.a;\n  var invF = this.rf;\n  var flattening = 1 / invF;\n  var e2 = 2 * flattening - Math.pow(flattening, 2);\n  var e = this.e = Math.sqrt(e2);\n  this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));\n  this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));\n  this.b0 = Math.asin(sinPhy0 / this.alpha);\n  var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));\n  var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));\n  var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));\n  this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;\n}\n\nexport function forward(p) {\n  var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));\n  var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));\n  var S = -this.alpha * (Sa1 + Sa2) + this.K;\n\n  // spheric latitude\n  var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4);\n\n  // spheric longitude\n  var I = this.alpha * (p.x - this.lambda0);\n\n  // psoeudo equatorial rotation\n  var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));\n\n  var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));\n\n  p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;\n  p.x = this.R * rotI + this.x0;\n  return p;\n}\n\nexport function inverse(p) {\n  var Y = p.x - this.x0;\n  var X = p.y - this.y0;\n\n  var rotI = Y / this.R;\n  var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);\n\n  var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));\n  var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));\n\n  var lambda = this.lambda0 + I / this.alpha;\n\n  var S = 0;\n  var phy = b;\n  var prevPhy = -1000;\n  var iteration = 0;\n  while (Math.abs(phy - prevPhy) > 0.0000001) {\n    if (++iteration > 20) {\n      //...reportError(\"omercFwdInfinity\");\n      return;\n    }\n    //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));\n    S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));\n    prevPhy = phy;\n    phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;\n  }\n\n  p.x = lambda;\n  p.y = phy;\n  return p;\n}\n\nexport var names = [\"somerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "import tsfnz from '../common/tsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport { D2R, EPSLN, HALF_PI, TWO_PI, FORTPI } from '../constants/values';\n\nvar TOL = 1e-7;\n\nfunction isTypeA(P) {\n  var typeAProjections = ['Hotine_Oblique_Mercator','Hotine_Oblique_Mercator_Azimuth_Natural_Origin'];\n  var projectionName = typeof P.PROJECTION === \"object\" ? Object.keys(P.PROJECTION)[0] : P.PROJECTION;\n  \n  return 'no_uoff' in P || 'no_off' in P || typeAProjections.indexOf(projectionName) !== -1;\n}\n\n\n/* Initialize the Oblique Mercator  projection\n    ------------------------------------------*/\nexport function init() {  \n  var con, com, cosph0, D, F, H, L, sinph0, p, J, gamma = 0,\n    gamma0, lamc = 0, lam1 = 0, lam2 = 0, phi1 = 0, phi2 = 0, alpha_c = 0, AB;\n  \n  // only Type A uses the no_off or no_uoff property\n  // https://github.com/OSGeo/proj.4/issues/104\n  this.no_off = isTypeA(this);\n  this.no_rot = 'no_rot' in this;\n  \n  var alp = false;\n  if (\"alpha\" in this) {\n    alp = true;\n  }\n\n  var gam = false;\n  if (\"rectified_grid_angle\" in this) {\n    gam = true;\n  }\n\n  if (alp) {\n    alpha_c = this.alpha;\n  }\n  \n  if (gam) {\n    gamma = (this.rectified_grid_angle * D2R);\n  }\n  \n  if (alp || gam) {\n    lamc = this.longc;\n  } else {\n    lam1 = this.long1;\n    phi1 = this.lat1;\n    lam2 = this.long2;\n    phi2 = this.lat2;\n    \n    if (Math.abs(phi1 - phi2) <= TOL || (con = Math.abs(phi1)) <= TOL ||\n        Math.abs(con - HALF_PI) <= TOL || Math.abs(Math.abs(this.lat0) - HALF_PI) <= TOL ||\n        Math.abs(Math.abs(phi2) - HALF_PI) <= TOL) {\n      throw new Error();\n    }\n  }\n  \n  var one_es = 1.0 - this.es;\n  com = Math.sqrt(one_es);\n  \n  if (Math.abs(this.lat0) > EPSLN) {\n    sinph0 = Math.sin(this.lat0);\n    cosph0 = Math.cos(this.lat0);\n    con = 1 - this.es * sinph0 * sinph0;\n    this.B = cosph0 * cosph0;\n    this.B = Math.sqrt(1 + this.es * this.B * this.B / one_es);\n    this.A = this.B * this.k0 * com / con;\n    D = this.B * com / (cosph0 * Math.sqrt(con));\n    F = D * D -1;\n    \n    if (F <= 0) {\n      F = 0;\n    } else {\n      F = Math.sqrt(F);\n      if (this.lat0 < 0) {\n        F = -F;\n      }\n    }\n    \n    this.E = F += D;\n    this.E *= Math.pow(tsfnz(this.e, this.lat0, sinph0), this.B);\n  } else {\n    this.B = 1 / com;\n    this.A = this.k0;\n    this.E = D = F = 1;\n  }\n  \n  if (alp || gam) {\n    if (alp) {\n      gamma0 = Math.asin(Math.sin(alpha_c) / D);\n      if (!gam) {\n        gamma = alpha_c;\n      }\n    } else {\n      gamma0 = gamma;\n      alpha_c = Math.asin(D * Math.sin(gamma0));\n    }\n    this.lam0 = lamc - Math.asin(0.5 * (F - 1 / F) * Math.tan(gamma0)) / this.B;\n  } else {\n    H = Math.pow(tsfnz(this.e, phi1, Math.sin(phi1)), this.B);\n    L = Math.pow(tsfnz(this.e, phi2, Math.sin(phi2)), this.B);\n    F = this.E / H;\n    p = (L - H) / (L + H);\n    J = this.E * this.E;\n    J = (J - L * H) / (J + L * H);\n    con = lam1 - lam2;\n    \n    if (con < -Math.pi) {\n      lam2 -=TWO_PI;\n    } else if (con > Math.pi) {\n      lam2 += TWO_PI;\n    }\n    \n    this.lam0 = adjust_lon(0.5 * (lam1 + lam2) - Math.atan(J * Math.tan(0.5 * this.B * (lam1 - lam2)) / p) / this.B);\n    gamma0 = Math.atan(2 * Math.sin(this.B * adjust_lon(lam1 - this.lam0)) / (F - 1 / F));\n    gamma = alpha_c = Math.asin(D * Math.sin(gamma0));\n  }\n  \n  this.singam = Math.sin(gamma0);\n  this.cosgam = Math.cos(gamma0);\n  this.sinrot = Math.sin(gamma);\n  this.cosrot = Math.cos(gamma);\n  \n  this.rB = 1 / this.B;\n  this.ArB = this.A * this.rB;\n  this.BrA = 1 / this.ArB;\n  AB = this.A * this.B;\n  \n  if (this.no_off) {\n    this.u_0 = 0;\n  } else {\n    this.u_0 = Math.abs(this.ArB * Math.atan(Math.sqrt(D * D - 1) / Math.cos(alpha_c)));\n    \n    if (this.lat0 < 0) {\n      this.u_0 = - this.u_0;\n    }  \n  }\n    \n  F = 0.5 * gamma0;\n  this.v_pole_n = this.ArB * Math.log(Math.tan(FORTPI - F));\n  this.v_pole_s = this.ArB * Math.log(Math.tan(FORTPI + F));\n}\n\n\n/* Oblique Mercator forward equations--mapping lat,long to x,y\n    ----------------------------------------------------------*/\nexport function forward(p) {\n  var coords = {};\n  var S, T, U, V, W, temp, u, v;\n  p.x = p.x - this.lam0;\n  \n  if (Math.abs(Math.abs(p.y) - HALF_PI) > EPSLN) {\n    W = this.E / Math.pow(tsfnz(this.e, p.y, Math.sin(p.y)), this.B);\n    \n    temp = 1 / W;\n    S = 0.5 * (W - temp);\n    T = 0.5 * (W + temp);\n    V = Math.sin(this.B * p.x);\n    U = (S * this.singam - V * this.cosgam) / T;\n        \n    if (Math.abs(Math.abs(U) - 1.0) < EPSLN) {\n      throw new Error();\n    }\n    \n    v = 0.5 * this.ArB * Math.log((1 - U)/(1 + U));\n    temp = Math.cos(this.B * p.x);\n    \n    if (Math.abs(temp) < TOL) {\n      u = this.A * p.x;\n    } else {\n      u = this.ArB * Math.atan2((S * this.cosgam + V * this.singam), temp);\n    }    \n  } else {\n    v = p.y > 0 ? this.v_pole_n : this.v_pole_s;\n    u = this.ArB * p.y;\n  }\n     \n  if (this.no_rot) {\n    coords.x = u;\n    coords.y = v;\n  } else {\n    u -= this.u_0;\n    coords.x = v * this.cosrot + u * this.sinrot;\n    coords.y = u * this.cosrot - v * this.sinrot;\n  }\n  \n  coords.x = (this.a * coords.x + this.x0);\n  coords.y = (this.a * coords.y + this.y0);\n  \n  return coords;\n}\n\nexport function inverse(p) {\n  var u, v, Qp, Sp, Tp, Vp, Up;\n  var coords = {};\n  \n  p.x = (p.x - this.x0) * (1.0 / this.a);\n  p.y = (p.y - this.y0) * (1.0 / this.a);\n\n  if (this.no_rot) {\n    v = p.y;\n    u = p.x;\n  } else {\n    v = p.x * this.cosrot - p.y * this.sinrot;\n    u = p.y * this.cosrot + p.x * this.sinrot + this.u_0;\n  }\n  \n  Qp = Math.exp(-this.BrA * v);\n  Sp = 0.5 * (Qp - 1 / Qp);\n  Tp = 0.5 * (Qp + 1 / Qp);\n  Vp = Math.sin(this.BrA * u);\n  Up = (Vp * this.cosgam + Sp * this.singam) / Tp;\n  \n  if (Math.abs(Math.abs(Up) - 1) < EPSLN) {\n    coords.x = 0;\n    coords.y = Up < 0 ? -HALF_PI : HALF_PI;\n  } else {\n    coords.y = this.E / Math.sqrt((1 + Up) / (1 - Up));\n    coords.y = phi2z(this.e, Math.pow(coords.y, 1 / this.B));\n    \n    if (coords.y === Infinity) {\n      throw new Error();\n    }\n        \n    coords.x = -this.rB * Math.atan2((Sp * this.cosgam - Vp * this.singam), Math.cos(this.BrA * u));\n  }\n  \n  coords.x += this.lam0;\n  \n  return coords;\n}\n\nexport var names = [\"Hotine_Oblique_Mercator\", \"Hotine Oblique Mercator\", \"Hotine_Oblique_Mercator_Azimuth_Natural_Origin\", \"Hotine_Oblique_Mercator_Two_Point_Natural_Origin\", \"Hotine_Oblique_Mercator_Azimuth_Center\", \"Oblique_Mercator\", \"omerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "import msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport sign from '../common/sign';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport {HALF_PI, EPSLN} from '../constants/values';\nexport function init() {\n  \n  //double lat0;                    /* the reference latitude               */\n  //double long0;                   /* the reference longitude              */\n  //double lat1;                    /* first standard parallel              */\n  //double lat2;                    /* second standard parallel             */\n  //double r_maj;                   /* major axis                           */\n  //double r_min;                   /* minor axis                           */\n  //double false_east;              /* x offset in meters                   */\n  //double false_north;             /* y offset in meters                   */\n  \n  //the above value can be set with proj4.defs\n  //example: proj4.defs(\"EPSG:2154\",\"+proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\");\n\n  if (!this.lat2) {\n    this.lat2 = this.lat1;\n  } //if lat2 is not defined\n  if (!this.k0) {\n    this.k0 = 1;\n  }\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n\n  var temp = this.b / this.a;\n  this.e = Math.sqrt(1 - temp * temp);\n\n  var sin1 = Math.sin(this.lat1);\n  var cos1 = Math.cos(this.lat1);\n  var ms1 = msfnz(this.e, sin1, cos1);\n  var ts1 = tsfnz(this.e, this.lat1, sin1);\n\n  var sin2 = Math.sin(this.lat2);\n  var cos2 = Math.cos(this.lat2);\n  var ms2 = msfnz(this.e, sin2, cos2);\n  var ts2 = tsfnz(this.e, this.lat2, sin2);\n\n  var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);\n  }\n  else {\n    this.ns = sin1;\n  }\n  if (isNaN(this.ns)) {\n    this.ns = sin1;\n  }\n  this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));\n  this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);\n  if (!this.title) {\n    this.title = \"Lambert Conformal Conic\";\n  }\n}\n\n// Lambert Conformal conic forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  // singular cases :\n  if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {\n    lat = sign(lat) * (HALF_PI - 2 * EPSLN);\n  }\n\n  var con = Math.abs(Math.abs(lat) - HALF_PI);\n  var ts, rh1;\n  if (con > EPSLN) {\n    ts = tsfnz(this.e, lat, Math.sin(lat));\n    rh1 = this.a * this.f0 * Math.pow(ts, this.ns);\n  }\n  else {\n    con = lat * this.ns;\n    if (con <= 0) {\n      return null;\n    }\n    rh1 = 0;\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;\n  p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;\n\n  return p;\n}\n\n// Lambert Conformal Conic inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var rh1, con, ts;\n  var lat, lon;\n  var x = (p.x - this.x0) / this.k0;\n  var y = (this.rh - (p.y - this.y0) / this.k0);\n  if (this.ns > 0) {\n    rh1 = Math.sqrt(x * x + y * y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(x * x + y * y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2((con * x), (con * y));\n  }\n  if ((rh1 !== 0) || (this.ns > 0)) {\n    con = 1 / this.ns;\n    ts = Math.pow((rh1 / (this.a * this.f0)), con);\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  else {\n    lat = -HALF_PI;\n  }\n  lon = adjust_lon(theta / this.ns + this.long0);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\n  \"Lambert Tangential Conformal Conic Projection\",\n  \"Lambert_Conformal_Conic\",\n  \"Lambert_Conformal_Conic_1SP\",\n  \"Lambert_Conformal_Conic_2SP\",\n  \"lcc\",\n  \"Lambert Conic Conformal (1SP)\",\n  \"Lambert Conic Conformal (2SP)\"\n];\n\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "import adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  this.a = 6377397.155;\n  this.es = 0.006674372230614;\n  this.e = Math.sqrt(this.es);\n  if (!this.lat0) {\n    this.lat0 = 0.863937979737193;\n  }\n  if (!this.long0) {\n    this.long0 = 0.7417649320975901 - 0.308341501185665;\n  }\n  /* if scale not set default to 0.9999 */\n  if (!this.k0) {\n    this.k0 = 0.9999;\n  }\n  this.s45 = 0.785398163397448; /* 45 */\n  this.s90 = 2 * this.s45;\n  this.fi0 = this.lat0;\n  this.e2 = this.es;\n  this.e = Math.sqrt(this.e2);\n  this.alfa = Math.sqrt(1 + (this.e2 * Math.pow(Math.cos(this.fi0), 4)) / (1 - this.e2));\n  this.uq = 1.04216856380474;\n  this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);\n  this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);\n  this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;\n  this.k1 = this.k0;\n  this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));\n  this.s0 = 1.37008346281555;\n  this.n = Math.sin(this.s0);\n  this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);\n  this.ad = this.s90 - this.uq;\n}\n\n/* ellipsoid */\n/* calculate xy from lat/lon */\n/* Constants, identical to inverse transform function */\nexport function forward(p) {\n  var gfi, u, deltav, s, d, eps, ro;\n  var lon = p.x;\n  var lat = p.y;\n  var delta_lon = adjust_lon(lon - this.long0);\n  /* Transformation */\n  gfi = Math.pow(((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat))), (this.alfa * this.e / 2));\n  u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);\n  deltav = -delta_lon * this.alfa;\n  s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));\n  d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));\n  eps = this.n * d;\n  ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);\n  p.y = ro * Math.cos(eps) / 1;\n  p.x = ro * Math.sin(eps) / 1;\n\n  if (!this.czech) {\n    p.y *= -1;\n    p.x *= -1;\n  }\n  return (p);\n}\n\n/* calculate lat/lon from xy */\nexport function inverse(p) {\n  var u, deltav, s, d, eps, ro, fi1;\n  var ok;\n\n  /* Transformation */\n  /* revert y, x*/\n  var tmp = p.x;\n  p.x = p.y;\n  p.y = tmp;\n  if (!this.czech) {\n    p.y *= -1;\n    p.x *= -1;\n  }\n  ro = Math.sqrt(p.x * p.x + p.y * p.y);\n  eps = Math.atan2(p.y, p.x);\n  d = eps / Math.sin(this.s0);\n  s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);\n  u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));\n  deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));\n  p.x = this.long0 - deltav / this.alfa;\n  fi1 = u;\n  ok = 0;\n  var iter = 0;\n  do {\n    p.y = 2 * (Math.atan(Math.pow(this.k, - 1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);\n    if (Math.abs(fi1 - p.y) < 0.0000000001) {\n      ok = 1;\n    }\n    fi1 = p.y;\n    iter += 1;\n  } while (ok === 0 && iter < 15);\n  if (iter >= 15) {\n    return null;\n  }\n\n  return (p);\n}\n\nexport var names = [\"Krovak\", \"krovak\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "export default function(e0, e1, e2, e3, phi) {\n  return (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi));\n}", "export default function(x) {\n  return (1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x)));\n}", "export default function(x) {\n  return (0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x)));\n}", "export default function(x) {\n  return (0.05859375 * x * x * (1 + 0.75 * x));\n}", "export default function(x) {\n  return (x * x * x * (35 / 3072));\n}", "export default function(a, e, sinphi) {\n  var temp = e * sinphi;\n  return a / Math.sqrt(1 - temp * temp);\n}", "import {HALF_PI} from '../constants/values';\nimport sign from './sign';\n\nexport default function(x) {\n  return (Math.abs(x) < HALF_PI) ? x : (x - (sign(x) * Math.PI));\n}\n", "export default function(ml, e0, e1, e2, e3) {\n  var phi;\n  var dphi;\n\n  phi = ml / e0;\n  for (var i = 0; i < 15; i++) {\n    dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n\n  //..reportError(\"IMLFN-CONV:Latitude failed to converge after 15 iterations\");\n  return NaN;\n}", "import mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport gN from '../common/gN';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport imlfn from '../common/imlfn';\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nexport function init() {\n  if (!this.sphere) {\n    this.e0 = e0fn(this.es);\n    this.e1 = e1fn(this.es);\n    this.e2 = e2fn(this.es);\n    this.e3 = e3fn(this.es);\n    this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n  }\n}\n\n/* Cassini forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y;\n  var lam = p.x;\n  var phi = p.y;\n  lam = adjust_lon(lam - this.long0);\n\n  if (this.sphere) {\n    x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));\n    y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);\n  }\n  else {\n    //ellipsoid\n    var sinphi = Math.sin(phi);\n    var cosphi = Math.cos(phi);\n    var nl = gN(this.a, this.e, sinphi);\n    var tl = Math.tan(phi) * Math.tan(phi);\n    var al = lam * Math.cos(phi);\n    var asq = al * al;\n    var cl = this.es * cosphi * cosphi / (1 - this.es);\n    var ml = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n\n    x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));\n    y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);\n\n\n  }\n\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var phi, lam;\n\n  if (this.sphere) {\n    var dd = y + this.lat0;\n    phi = Math.asin(Math.sin(dd) * Math.cos(x));\n    lam = Math.atan2(Math.tan(x), Math.cos(dd));\n  }\n  else {\n    /* ellipsoid */\n    var ml1 = this.ml0 / this.a + y;\n    var phi1 = imlfn(ml1, this.e0, this.e1, this.e2, this.e3);\n    if (Math.abs(Math.abs(phi1) - HALF_PI) <= EPSLN) {\n      p.x = this.long0;\n      p.y = HALF_PI;\n      if (y < 0) {\n        p.y *= -1;\n      }\n      return p;\n    }\n    var nl1 = gN(this.a, this.e, Math.sin(phi1));\n\n    var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);\n    var tl1 = Math.pow(Math.tan(phi1), 2);\n    var dl = x * this.a / nl1;\n    var dsq = dl * dl;\n    phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);\n    lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);\n\n  }\n\n  p.x = adjust_lon(lam + this.long0);\n  p.y = adjust_lat(phi);\n  return p;\n\n}\n\nexport var names = [\"Cassini\", \"Cassini_Soldner\", \"cass\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "export default function(eccent, sinphi) {\n  var con;\n  if (eccent > 1.0e-7) {\n    con = eccent * sinphi;\n    return ((1 - eccent * eccent) * (sinphi / (1 - con * con) - (0.5 / eccent) * Math.log((1 - con) / (1 + con))));\n  }\n  else {\n    return (2 * sinphi);\n  }\n}", "\nimport {HALF_PI, EPSLN, FORTPI} from '../constants/values';\n\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\nexport var S_POLE = 1;\n\nexport var N_POLE = 2;\nexport var EQUIT = 3;\nexport var OBLIQ = 4;\n\n/* Initialize the Lambert Azimuthal Equal Area projection\n  ------------------------------------------------------*/\nexport function init() {\n  var t = Math.abs(this.lat0);\n  if (Math.abs(t - HALF_PI) < EPSLN) {\n    this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;\n  }\n  else if (Math.abs(t) < EPSLN) {\n    this.mode = this.EQUIT;\n  }\n  else {\n    this.mode = this.OBLIQ;\n  }\n  if (this.es > 0) {\n    var sinphi;\n\n    this.qp = qsfnz(this.e, 1);\n    this.mmf = 0.5 / (1 - this.es);\n    this.apa = authset(this.es);\n    switch (this.mode) {\n    case this.N_POLE:\n      this.dd = 1;\n      break;\n    case this.S_POLE:\n      this.dd = 1;\n      break;\n    case this.EQUIT:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      this.dd = 1 / this.rq;\n      this.xmf = 1;\n      this.ymf = 0.5 * this.qp;\n      break;\n    case this.OBLIQ:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      sinphi = Math.sin(this.lat0);\n      this.sinb1 = qsfnz(this.e, sinphi) / this.qp;\n      this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);\n      this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);\n      this.ymf = (this.xmf = this.rq) / this.dd;\n      this.xmf *= this.dd;\n      break;\n    }\n  }\n  else {\n    if (this.mode === this.OBLIQ) {\n      this.sinph0 = Math.sin(this.lat0);\n      this.cosph0 = Math.cos(this.lat0);\n    }\n  }\n}\n\n/* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;\n  var lam = p.x;\n  var phi = p.y;\n\n  lam = adjust_lon(lam - this.long0);\n  if (this.sphere) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    coslam = Math.cos(lam);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      y = (this.mode === this.EQUIT) ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n      if (y <= EPSLN) {\n        return null;\n      }\n      y = Math.sqrt(2 / y);\n      x = y * cosphi * Math.sin(lam);\n      y *= (this.mode === this.EQUIT) ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        coslam = -coslam;\n      }\n      if (Math.abs(phi + this.lat0) < EPSLN) {\n        return null;\n      }\n      y = FORTPI - phi * 0.5;\n      y = 2 * ((this.mode === this.S_POLE) ? Math.cos(y) : Math.sin(y));\n      x = y * Math.sin(lam);\n      y *= coslam;\n    }\n  }\n  else {\n    sinb = 0;\n    cosb = 0;\n    b = 0;\n    coslam = Math.cos(lam);\n    sinlam = Math.sin(lam);\n    sinphi = Math.sin(phi);\n    q = qsfnz(this.e, sinphi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinb = q / this.qp;\n      cosb = Math.sqrt(1 - sinb * sinb);\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n      b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;\n      break;\n    case this.EQUIT:\n      b = 1 + cosb * coslam;\n      break;\n    case this.N_POLE:\n      b = HALF_PI + phi;\n      q = this.qp - q;\n      break;\n    case this.S_POLE:\n      b = phi - HALF_PI;\n      q = this.qp + q;\n      break;\n    }\n    if (Math.abs(b) < EPSLN) {\n      return null;\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n    case this.EQUIT:\n      b = Math.sqrt(2 / b);\n      if (this.mode === this.OBLIQ) {\n        y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);\n      }\n      else {\n        y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;\n      }\n      x = this.xmf * b * cosb * sinlam;\n      break;\n    case this.N_POLE:\n    case this.S_POLE:\n      if (q >= 0) {\n        x = (b = Math.sqrt(q)) * sinlam;\n        y = coslam * ((this.mode === this.S_POLE) ? b : -b);\n      }\n      else {\n        x = y = 0;\n      }\n      break;\n    }\n  }\n\n  p.x = this.a * x + this.x0;\n  p.y = this.a * y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var lam, phi, cCe, sCe, q, rho, ab;\n  if (this.sphere) {\n    var cosz = 0,\n      rh, sinz = 0;\n\n    rh = Math.sqrt(x * x + y * y);\n    phi = rh * 0.5;\n    if (phi > 1) {\n      return null;\n    }\n    phi = 2 * Math.asin(phi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinz = Math.sin(phi);\n      cosz = Math.cos(phi);\n    }\n    switch (this.mode) {\n    case this.EQUIT:\n      phi = (Math.abs(rh) <= EPSLN) ? 0 : Math.asin(y * sinz / rh);\n      x *= sinz;\n      y = cosz * rh;\n      break;\n    case this.OBLIQ:\n      phi = (Math.abs(rh) <= EPSLN) ? this.lat0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);\n      x *= sinz * this.cosph0;\n      y = (cosz - Math.sin(phi) * this.sinph0) * rh;\n      break;\n    case this.N_POLE:\n      y = -y;\n      phi = HALF_PI - phi;\n      break;\n    case this.S_POLE:\n      phi -= HALF_PI;\n      break;\n    }\n    lam = (y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ)) ? 0 : Math.atan2(x, y);\n  }\n  else {\n    ab = 0;\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      x /= this.dd;\n      y *= this.dd;\n      rho = Math.sqrt(x * x + y * y);\n      if (rho < EPSLN) {\n        p.x = this.long0;\n        p.y = this.lat0;\n        return p;\n      }\n      sCe = 2 * Math.asin(0.5 * rho / this.rq);\n      cCe = Math.cos(sCe);\n      x *= (sCe = Math.sin(sCe));\n      if (this.mode === this.OBLIQ) {\n        ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;\n        q = this.qp * ab;\n        y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;\n      }\n      else {\n        ab = y * sCe / rho;\n        q = this.qp * ab;\n        y = rho * cCe;\n      }\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        y = -y;\n      }\n      q = (x * x + y * y);\n      if (!q) {\n        p.x = this.long0;\n        p.y = this.lat0;\n        return p;\n      }\n      ab = 1 - q / this.qp;\n      if (this.mode === this.S_POLE) {\n        ab = -ab;\n      }\n    }\n    lam = Math.atan2(x, y);\n    phi = authlat(Math.asin(ab), this.apa);\n  }\n\n  p.x = adjust_lon(this.long0 + lam);\n  p.y = phi;\n  return p;\n}\n\n/* determine latitude from authalic latitude */\nvar P00 = 0.33333333333333333333;\n\nvar P01 = 0.17222222222222222222;\nvar P02 = 0.10257936507936507936;\nvar P10 = 0.06388888888888888888;\nvar P11 = 0.06640211640211640211;\nvar P20 = 0.01641501294219154443;\n\nfunction authset(es) {\n  var t;\n  var APA = [];\n  APA[0] = es * P00;\n  t = es * es;\n  APA[0] += t * P01;\n  APA[1] = t * P10;\n  t *= es;\n  APA[0] += t * P02;\n  APA[1] += t * P11;\n  APA[2] = t * P20;\n  return APA;\n}\n\nfunction authlat(beta, APA) {\n  var t = beta + beta;\n  return (beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t));\n}\n\nexport var names = [\"Lambert Azimuthal Equal Area\", \"Lambert_Azimuthal_Equal_Area\", \"laea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  S_POLE: S_POLE,\n  N_POLE: N_POLE,\n  EQUIT: EQUIT,\n  OBLIQ: OBLIQ\n};\n", "export default function(x) {\n  if (Math.abs(x) > 1) {\n    x = (x > 1) ? 1 : -1;\n  }\n  return Math.asin(x);\n}", "import msfnz from '../common/msfnz';\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e3 = Math.sqrt(this.es);\n\n  this.sin_po = Math.sin(this.lat1);\n  this.cos_po = Math.cos(this.lat1);\n  this.t1 = this.sin_po;\n  this.con = this.sin_po;\n  this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs1 = qsfnz(this.e3, this.sin_po);\n\n  this.sin_po = Math.sin(this.lat2);\n  this.cos_po = Math.cos(this.lat2);\n  this.t2 = this.sin_po;\n  this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs2 = qsfnz(this.e3, this.sin_po);\n\n  this.sin_po = Math.sin(this.lat0);\n  this.cos_po = Math.cos(this.lat0);\n  this.t3 = this.sin_po;\n  this.qs0 = qsfnz(this.e3, this.sin_po);\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);\n  }\n  else {\n    this.ns0 = this.con;\n  }\n  this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;\n  this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;\n}\n\n/* Albers Conical Equal Area forward equations--mapping lat,long to x,y\n  -------------------------------------------------------------------*/\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  this.sin_phi = Math.sin(lat);\n  this.cos_phi = Math.cos(lat);\n\n  var qs = qsfnz(this.e3, this.sin_phi);\n  var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;\n  var theta = this.ns0 * adjust_lon(lon - this.long0);\n  var x = rh1 * Math.sin(theta) + this.x0;\n  var y = this.rh - rh1 * Math.cos(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh1, qs, con, theta, lon, lat;\n\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  if (this.ns0 >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n  con = rh1 * this.ns0 / this.a;\n  if (this.sphere) {\n    lat = Math.asin((this.c - con * con) / (2 * this.ns0));\n  }\n  else {\n    qs = (this.c - con * con) / this.ns0;\n    lat = this.phi1z(this.e3, qs);\n  }\n\n  lon = adjust_lon(theta / this.ns0 + this.long0);\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\n/* Function to compute phi1, the latitude for the inverse of the\n   Albers Conical Equal-Area projection.\n-------------------------------------------*/\nexport function phi1z(eccent, qs) {\n  var sinphi, cosphi, con, com, dphi;\n  var phi = asinz(0.5 * qs);\n  if (eccent < EPSLN) {\n    return phi;\n  }\n\n  var eccnts = eccent * eccent;\n  for (var i = 1; i <= 25; i++) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    con = eccent * sinphi;\n    com = 1 - con * con;\n    dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi = phi + dphi;\n    if (Math.abs(dphi) <= 1e-7) {\n      return phi;\n    }\n  }\n  return null;\n}\n\nexport var names = [\"Albers_Conic_Equal_Area\", \"Albers\", \"aea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  phi1z: phi1z\n};\n", "import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\n/*\n  reference:\n    Wolfram Mathworld \"Gnomonic Projection\"\n    http://mathworld.wolfram.com/GnomonicProjection.html\n    Accessed: 12th November 2009\n  */\nexport function init() {\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n  // Approximation for projecting points to the horizon (infinity)\n  this.infinity_dist = 1000 * this.a;\n  this.rc = 1;\n}\n\n/* Gnomonic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g;\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;\n  }\n  else {\n\n    // Point is in the opposing hemisphere and is unprojectable\n    // We still need to return a reasonable point, so we project\n    // to infinity, on a bearing\n    // equivalent to the northern hemisphere equivalent\n    // This is a reasonable approximation for short shapes and lines that\n    // straddle the horizon.\n\n    x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);\n    y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* Rho */\n  var sinc, cosc;\n  var c;\n  var lon, lat;\n\n  /* Inverse equations\n      -----------------*/\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n\n  if ((rh = Math.sqrt(p.x * p.x + p.y * p.y))) {\n    c = Math.atan2(rh, this.rc);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n\n    lat = asinz(cosc * this.sin_p14 + (p.y * sinc * this.cos_p14) / rh);\n    lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);\n    lon = adjust_lon(this.long0 + lon);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"gnom\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, q) {\n  var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));\n  if (Math.abs(Math.abs(q) - temp) < 1.0E-6) {\n    if (q < 0) {\n      return (-1 * HALF_PI);\n    }\n    else {\n      return HALF_PI;\n    }\n  }\n  //var phi = 0.5* q/(1-eccent*eccent);\n  var phi = Math.asin(0.5 * q);\n  var dphi;\n  var sin_phi;\n  var cos_phi;\n  var con;\n  for (var i = 0; i < 30; i++) {\n    sin_phi = Math.sin(phi);\n    cos_phi = Math.cos(phi);\n    con = eccent * sin_phi;\n    dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n\n  //console.log(\"IQSFN-CONV:Latitude failed to converge after 30 iterations\");\n  return NaN;\n}\n", "import adjust_lon from '../common/adjust_lon';\nimport qsfnz from '../common/qsfnz';\nimport msfnz from '../common/msfnz';\nimport iqsfnz from '../common/iqsfnz';\n\n/*\n  reference:\n    \"Cartographic Projection Procedures for the UNIX Environment-\n    A User's Manual\" by Gerald I. Evenden,\n    USGS Open File Report 90-284and Release 4 Interim Reports (2003)\n*/\nexport function init() {\n  //no-op\n  if (!this.sphere) {\n    this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n  }\n}\n\n/* Cylindrical Equal Area forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  if (this.sphere) {\n    x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);\n    y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);\n  }\n  else {\n    var qs = qsfnz(this.e, Math.sin(lat));\n    x = this.x0 + this.a * this.k0 * dlon;\n    y = this.y0 + this.a * qs * 0.5 / this.k0;\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Cylindrical Equal Area inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + (p.x / this.a) / Math.cos(this.lat_ts));\n    lat = Math.asin((p.y / this.a) * Math.cos(this.lat_ts));\n  }\n  else {\n    lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);\n    lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"cea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\n\nexport function init() {\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.lat_ts = this.lat_ts || 0;\n  this.title = this.title || \"Equidistant Cylindrical (Plate Carre)\";\n\n  this.rc = Math.cos(this.lat_ts);\n}\n\n// forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  var dlon = adjust_lon(lon - this.long0);\n  var dlat = adjust_lat(lat - this.lat0);\n  p.x = this.x0 + (this.a * dlon * this.rc);\n  p.y = this.y0 + (this.a * dlat);\n  return p;\n}\n\n// inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var x = p.x;\n  var y = p.y;\n\n  p.x = adjust_lon(this.long0 + ((x - this.x0) / (this.a * this.rc)));\n  p.y = adjust_lat(this.lat0 + ((y - this.y0) / (this.a)));\n  return p;\n}\n\nexport var names = [\"Equirectangular\", \"Equidistant_Cylindrical\", \"eqc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport mlfn from '../common/mlfn';\nimport {EPSLN} from '../constants/values';\n\nimport gN from '../common/gN';\nvar MAX_ITER = 20;\n\nexport function init() {\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n  this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas\n}\n\n/* Polyconic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y, el;\n  var dlon = adjust_lon(lon - this.long0);\n  el = dlon * Math.sin(lat);\n  if (this.sphere) {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.a * this.lat0;\n    }\n    else {\n      x = this.a * Math.sin(el) / Math.tan(lat);\n      y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));\n    }\n  }\n  else {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.ml0;\n    }\n    else {\n      var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);\n      x = nl * Math.sin(el);\n      y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));\n    }\n\n  }\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  var lon, lat, x, y, i;\n  var al, bl;\n  var phi, dphi;\n  x = p.x - this.x0;\n  y = p.y - this.y0;\n\n  if (this.sphere) {\n    if (Math.abs(y + this.a * this.lat0) <= EPSLN) {\n      lon = adjust_lon(x / this.a + this.long0);\n      lat = 0;\n    }\n    else {\n      al = this.lat0 + y / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var tanphi;\n      for (i = MAX_ITER; i; --i) {\n        tanphi = Math.tan(phi);\n        dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);\n        phi += dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n      lon = adjust_lon(this.long0 + (Math.asin(x * Math.tan(phi) / this.a)) / Math.sin(lat));\n    }\n  }\n  else {\n    if (Math.abs(y + this.ml0) <= EPSLN) {\n      lat = 0;\n      lon = adjust_lon(this.long0 + x / this.a);\n    }\n    else {\n\n      al = (this.ml0 + y) / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var cl, mln, mlnp, ma;\n      var con;\n      for (i = MAX_ITER; i; --i) {\n        con = this.e * Math.sin(phi);\n        cl = Math.sqrt(1 - con * con) * Math.tan(phi);\n        mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n        mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);\n        ma = mln / this.a;\n        dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);\n        phi -= dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n\n      //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);\n      cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);\n      lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Polyconic\", \"poly\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "import {SEC_TO_RAD} from '../constants/values';\n\n/*\n  reference\n    Department of Land and Survey Technical Circular 1973/32\n      http://www.linz.govt.nz/docs/miscellaneous/nz-map-definition.pdf\n    OSG Technical Report 4.1\n      http://www.linz.govt.nz/docs/miscellaneous/nzmg.pdf\n  */\n\n/**\n * iterations: Number of iterations to refine inverse transform.\n *     0 -> km accuracy\n *     1 -> m accuracy -- suitable for most mapping applications\n *     2 -> mm accuracy\n */\nexport var iterations = 1;\n\nexport function init() {\n  this.A = [];\n  this.A[1] = 0.6399175073;\n  this.A[2] = -0.1358797613;\n  this.A[3] = 0.063294409;\n  this.A[4] = -0.02526853;\n  this.A[5] = 0.0117879;\n  this.A[6] = -0.0055161;\n  this.A[7] = 0.0026906;\n  this.A[8] = -0.001333;\n  this.A[9] = 0.00067;\n  this.A[10] = -0.00034;\n\n  this.B_re = [];\n  this.B_im = [];\n  this.B_re[1] = 0.7557853228;\n  this.B_im[1] = 0;\n  this.B_re[2] = 0.249204646;\n  this.B_im[2] = 0.003371507;\n  this.B_re[3] = -0.001541739;\n  this.B_im[3] = 0.041058560;\n  this.B_re[4] = -0.10162907;\n  this.B_im[4] = 0.01727609;\n  this.B_re[5] = -0.26623489;\n  this.B_im[5] = -0.36249218;\n  this.B_re[6] = -0.6870983;\n  this.B_im[6] = -1.1651967;\n\n  this.C_re = [];\n  this.C_im = [];\n  this.C_re[1] = 1.3231270439;\n  this.C_im[1] = 0;\n  this.C_re[2] = -0.577245789;\n  this.C_im[2] = -0.007809598;\n  this.C_re[3] = 0.508307513;\n  this.C_im[3] = -0.112208952;\n  this.C_re[4] = -0.15094762;\n  this.C_im[4] = 0.18200602;\n  this.C_re[5] = 1.01418179;\n  this.C_im[5] = 1.64497696;\n  this.C_re[6] = 1.9660549;\n  this.C_im[6] = 2.5127645;\n\n  this.D = [];\n  this.D[1] = 1.5627014243;\n  this.D[2] = 0.5185406398;\n  this.D[3] = -0.03333098;\n  this.D[4] = -0.1052906;\n  this.D[5] = -0.0368594;\n  this.D[6] = 0.007317;\n  this.D[7] = 0.01220;\n  this.D[8] = 0.00394;\n  this.D[9] = -0.0013;\n}\n\n/**\n    New Zealand Map Grid Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var n;\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lat = lat - this.lat0;\n  var delta_lon = lon - this.long0;\n\n  // 1. Calculate d_phi and d_psi    ...                          // and d_lambda\n  // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.\n  var d_phi = delta_lat / SEC_TO_RAD * 1E-5;\n  var d_lambda = delta_lon;\n  var d_phi_n = 1; // d_phi^0\n\n  var d_psi = 0;\n  for (n = 1; n <= 10; n++) {\n    d_phi_n = d_phi_n * d_phi;\n    d_psi = d_psi + this.A[n] * d_phi_n;\n  }\n\n  // 2. Calculate theta\n  var th_re = d_psi;\n  var th_im = d_lambda;\n\n  // 3. Calculate z\n  var th_n_re = 1;\n  var th_n_im = 0; // theta^0\n  var th_n_re1;\n  var th_n_im1;\n\n  var z_re = 0;\n  var z_im = 0;\n  for (n = 1; n <= 6; n++) {\n    th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n    th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n    th_n_re = th_n_re1;\n    th_n_im = th_n_im1;\n    z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;\n    z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;\n  }\n\n  // 4. Calculate easting and northing\n  p.x = (z_im * this.a) + this.x0;\n  p.y = (z_re * this.a) + this.y0;\n\n  return p;\n}\n\n/**\n    New Zealand Map Grid Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var n;\n  var x = p.x;\n  var y = p.y;\n\n  var delta_x = x - this.x0;\n  var delta_y = y - this.y0;\n\n  // 1. Calculate z\n  var z_re = delta_y / this.a;\n  var z_im = delta_x / this.a;\n\n  // 2a. Calculate theta - first approximation gives km accuracy\n  var z_n_re = 1;\n  var z_n_im = 0; // z^0\n  var z_n_re1;\n  var z_n_im1;\n\n  var th_re = 0;\n  var th_im = 0;\n  for (n = 1; n <= 6; n++) {\n    z_n_re1 = z_n_re * z_re - z_n_im * z_im;\n    z_n_im1 = z_n_im * z_re + z_n_re * z_im;\n    z_n_re = z_n_re1;\n    z_n_im = z_n_im1;\n    th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;\n    th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;\n  }\n\n  // 2b. Iterate to refine the accuracy of the calculation\n  //        0 iterations gives km accuracy\n  //        1 iteration gives m accuracy -- good enough for most mapping applications\n  //        2 iterations bives mm accuracy\n  for (var i = 0; i < this.iterations; i++) {\n    var th_n_re = th_re;\n    var th_n_im = th_im;\n    var th_n_re1;\n    var th_n_im1;\n\n    var num_re = z_re;\n    var num_im = z_im;\n    for (n = 2; n <= 6; n++) {\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n      th_n_re = th_n_re1;\n      th_n_im = th_n_im1;\n      num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n      num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n    }\n\n    th_n_re = 1;\n    th_n_im = 0;\n    var den_re = this.B_re[1];\n    var den_im = this.B_im[1];\n    for (n = 2; n <= 6; n++) {\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n      th_n_re = th_n_re1;\n      th_n_im = th_n_im1;\n      den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n      den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n    }\n\n    // Complex division\n    var den2 = den_re * den_re + den_im * den_im;\n    th_re = (num_re * den_re + num_im * den_im) / den2;\n    th_im = (num_im * den_re - num_re * den_im) / den2;\n  }\n\n  // 3. Calculate d_phi              ...                                    // and d_lambda\n  var d_psi = th_re;\n  var d_lambda = th_im;\n  var d_psi_n = 1; // d_psi^0\n\n  var d_phi = 0;\n  for (n = 1; n <= 9; n++) {\n    d_psi_n = d_psi_n * d_psi;\n    d_phi = d_phi + this.D[n] * d_psi_n;\n  }\n\n  // 4. Calculate latitude and longitude\n  // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.\n  var lat = this.lat0 + (d_phi * SEC_TO_RAD * 1E5);\n  var lon = this.long0 + d_lambda;\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"New_Zealand_Map_Grid\", \"nzmg\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "import adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\n\n/* Initialize the Miller Cylindrical projection\n  -------------------------------------------*/\nexport function init() {\n  //no-op\n}\n\n/* Miller Cylindrical forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  var x = this.x0 + this.a * dlon;\n  var y = this.y0 + this.a * Math.log(Math.tan((Math.PI / 4) + (lat / 2.5))) * 1.25;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Miller Cylindrical inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n\n  var lon = adjust_lon(this.long0 + p.x / this.a);\n  var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Miller_Cylindrical\", \"mill\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport pj_enfn from '../common/pj_enfn';\nvar MAX_ITER = 20;\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n\nexport function init() {\n  /* Place parameters in static storage for common use\n    -------------------------------------------------*/\n\n\n  if (!this.sphere) {\n    this.en = pj_enfn(this.es);\n  }\n  else {\n    this.n = 1;\n    this.m = 0;\n    this.es = 0;\n    this.C_y = Math.sqrt((this.m + 1) / this.n);\n    this.C_x = this.C_y / (this.m + 1);\n  }\n\n}\n\n/* Sinusoidal forward equations--mapping lat,long to x,y\n  -----------------------------------------------------*/\nexport function forward(p) {\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n    -----------------*/\n  lon = adjust_lon(lon - this.long0);\n\n  if (this.sphere) {\n    if (!this.m) {\n      lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;\n    }\n    else {\n      var k = this.n * Math.sin(lat);\n      for (var i = MAX_ITER; i; --i) {\n        var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));\n        lat -= V;\n        if (Math.abs(V) < EPSLN) {\n          break;\n        }\n      }\n    }\n    x = this.a * this.C_x * lon * (this.m + Math.cos(lat));\n    y = this.a * this.C_y * lat;\n\n  }\n  else {\n\n    var s = Math.sin(lat);\n    var c = Math.cos(lat);\n    y = this.a * pj_mlfn(lat, s, c, this.en);\n    x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var lat, temp, lon, s;\n\n  p.x -= this.x0;\n  lon = p.x / this.a;\n  p.y -= this.y0;\n  lat = p.y / this.a;\n\n  if (this.sphere) {\n    lat /= this.C_y;\n    lon = lon / (this.C_x * (this.m + Math.cos(lat)));\n    if (this.m) {\n      lat = asinz((this.m * lat + Math.sin(lat)) / this.n);\n    }\n    else if (this.n !== 1) {\n      lat = asinz(Math.sin(lat) / this.n);\n    }\n    lon = adjust_lon(lon + this.long0);\n    lat = adjust_lat(lat);\n  }\n  else {\n    lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);\n    s = Math.abs(lat);\n    if (s < HALF_PI) {\n      s = Math.sin(lat);\n      temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));\n      //temp = this.long0 + p.x / (this.a * Math.cos(lat));\n      lon = adjust_lon(temp);\n    }\n    else if ((s - EPSLN) < HALF_PI) {\n      lon = this.long0;\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Sinusoidal\", \"sinu\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "import adjust_lon from '../common/adjust_lon';\nexport function init() {}\nimport {EPSLN} from '../constants/values';\n/* Mollweide forward equations--mapping lat,long to x,y\n    ----------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var theta = lat;\n  var con = Math.PI * Math.sin(lat);\n\n  /* Iterate using the Newton-Raphson method to find theta\n      -----------------------------------------------------*/\n  while (true) {\n    var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));\n    theta += delta_theta;\n    if (Math.abs(delta_theta) < EPSLN) {\n      break;\n    }\n  }\n  theta /= 2;\n\n  /* If the latitude is 90 deg, force the x coordinate to be \"0 + false easting\"\n       this is done here because of precision problems with \"cos(theta)\"\n       --------------------------------------------------------------------------*/\n  if (Math.PI / 2 - Math.abs(lat) < EPSLN) {\n    delta_lon = 0;\n  }\n  var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;\n  var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var theta;\n  var arg;\n\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  arg = p.y / (1.4142135623731 * this.a);\n\n  /* Because of division by zero problems, 'arg' can not be 1.  Therefore\n       a number very close to one is used instead.\n       -------------------------------------------------------------------*/\n  if (Math.abs(arg) > 0.999999999999) {\n    arg = 0.999999999999;\n  }\n  theta = Math.asin(arg);\n  var lon = adjust_lon(this.long0 + (p.x / (0.900316316158 * this.a * Math.cos(theta))));\n  if (lon < (-Math.PI)) {\n    lon = -Math.PI;\n  }\n  if (lon > Math.PI) {\n    lon = Math.PI;\n  }\n  arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;\n  if (Math.abs(arg) > 1) {\n    arg = 1;\n  }\n  var lat = Math.asin(arg);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Mollweide\", \"moll\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport msfnz from '../common/msfnz';\nimport mlfn from '../common/mlfn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport imlfn from '../common/imlfn';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.lat2 = this.lat2 || this.lat1;\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n\n  this.sinphi = Math.sin(this.lat1);\n  this.cosphi = Math.cos(this.lat1);\n\n  this.ms1 = msfnz(this.e, this.sinphi, this.cosphi);\n  this.ml1 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat1);\n\n  if (Math.abs(this.lat1 - this.lat2) < EPSLN) {\n    this.ns = this.sinphi;\n  }\n  else {\n    this.sinphi = Math.sin(this.lat2);\n    this.cosphi = Math.cos(this.lat2);\n    this.ms2 = msfnz(this.e, this.sinphi, this.cosphi);\n    this.ml2 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat2);\n    this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);\n  }\n  this.g = this.ml1 + this.ms1 / this.ns;\n  this.ml0 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n  this.rh = this.a * (this.g - this.ml0);\n}\n\n/* Equidistant Conic forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var rh1;\n\n  /* Forward equations\n      -----------------*/\n  if (this.sphere) {\n    rh1 = this.a * (this.g - lat);\n  }\n  else {\n    var ml = mlfn(this.e0, this.e1, this.e2, this.e3, lat);\n    rh1 = this.a * (this.g - ml);\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  var x = this.x0 + rh1 * Math.sin(theta);\n  var y = this.y0 + this.rh - rh1 * Math.cos(theta);\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  var con, rh1, lat, lon;\n  if (this.ns >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + theta / this.ns);\n    lat = adjust_lat(this.g - rh1 / this.a);\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    var ml = this.g - rh1 / this.a;\n    lat = imlfn(ml, this.e0, this.e1, this.e2, this.e3);\n    lon = adjust_lon(this.long0 + theta / this.ns);\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n\n}\n\nexport var names = [\"Equidistant_Conic\", \"eqdc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "import adjust_lon from '../common/adjust_lon';\n\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n/* Initialize the Van Der Grinten projection\n  ----------------------------------------*/\nexport function init() {\n  //this.R = 6370997; //Radius of earth\n  this.R = this.a;\n}\n\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  /* Forward equations\n    -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  var x, y;\n\n  if (Math.abs(lat) <= EPSLN) {\n    x = this.x0 + this.R * dlon;\n    y = this.y0;\n  }\n  var theta = asinz(2 * Math.abs(lat / Math.PI));\n  if ((Math.abs(dlon) <= EPSLN) || (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN)) {\n    x = this.x0;\n    if (lat >= 0) {\n      y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);\n    }\n    else {\n      y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);\n    }\n    //  return(OK);\n  }\n  var al = 0.5 * Math.abs((Math.PI / dlon) - (dlon / Math.PI));\n  var asq = al * al;\n  var sinth = Math.sin(theta);\n  var costh = Math.cos(theta);\n\n  var g = costh / (sinth + costh - 1);\n  var gsq = g * g;\n  var m = g * (2 / sinth - 1);\n  var msq = m * m;\n  var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);\n  if (dlon < 0) {\n    con = -con;\n  }\n  x = this.x0 + con;\n  //con = Math.abs(con / (Math.PI * this.R));\n  var q = asq + g;\n  con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);\n  if (lat >= 0) {\n    //y = this.y0 + Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n    y = this.y0 + con;\n  }\n  else {\n    //y = this.y0 - Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n    y = this.y0 - con;\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Van Der Grinten inverse equations--mapping x,y to lat/long\n  ---------------------------------------------------------*/\nexport function inverse(p) {\n  var lon, lat;\n  var xx, yy, xys, c1, c2, c3;\n  var a1;\n  var m1;\n  var con;\n  var th1;\n  var d;\n\n  /* inverse equations\n    -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  con = Math.PI * this.R;\n  xx = p.x / con;\n  yy = p.y / con;\n  xys = xx * xx + yy * yy;\n  c1 = -Math.abs(yy) * (1 + xys);\n  c2 = c1 - 2 * yy * yy + xx * xx;\n  c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;\n  d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;\n  a1 = (c1 - c2 * c2 / 3 / c3) / c3;\n  m1 = 2 * Math.sqrt(-a1 / 3);\n  con = ((3 * d) / a1) / m1;\n  if (Math.abs(con) > 1) {\n    if (con >= 0) {\n      con = 1;\n    }\n    else {\n      con = -1;\n    }\n  }\n  th1 = Math.acos(con) / 3;\n  if (p.y >= 0) {\n    lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n  }\n  else {\n    lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n  }\n\n  if (Math.abs(xx) < EPSLN) {\n    lon = this.long0;\n  }\n  else {\n    lon = adjust_lon(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Van_der_Grinten_I\", \"VanDerGrinten\", \"vandg\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "import adjust_lon from '../common/adjust_lon';\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nimport mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport gN from '../common/gN';\nimport asinz from '../common/asinz';\nimport imlfn from '../common/imlfn';\n\n\n\nexport function init() {\n  this.sin_p12 = Math.sin(this.lat0);\n  this.cos_p12 = Math.cos(this.lat0);\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinphi = Math.sin(p.y);\n  var cosphi = Math.cos(p.y);\n  var dlon = adjust_lon(lon - this.long0);\n  var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;\n  if (this.sphere) {\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North Pole case\n      p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);\n      p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South Pole case\n      p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);\n      p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);\n      return p;\n    }\n    else {\n      //default case\n      cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);\n      c = Math.acos(cos_c);\n      kp = c ? c / Math.sin(c) : 1;\n      p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);\n      p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));\n      return p;\n    }\n  }\n  else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);\n      p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);\n      p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);\n      return p;\n    }\n    else {\n      //Default case\n      tanphi = sinphi / cosphi;\n      Nl1 = gN(this.a, this.e, this.sin_p12);\n      Nl = gN(this.a, this.e, sinphi);\n      psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));\n      Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));\n      if (Az === 0) {\n        s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n      }\n      else if (Math.abs(Math.abs(Az) - Math.PI) <= EPSLN) {\n        s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n      }\n      else {\n        s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));\n      }\n      G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);\n      H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);\n      GH = G * H;\n      Hs = H * H;\n      s2 = s * s;\n      s3 = s2 * s;\n      s4 = s3 * s;\n      s5 = s4 * s;\n      c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);\n      p.x = this.x0 + c * Math.sin(Az);\n      p.y = this.y0 + c * Math.cos(Az);\n      return p;\n    }\n  }\n\n\n}\n\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A, B, D, Ee, F, sinpsi;\n  if (this.sphere) {\n    rh = Math.sqrt(p.x * p.x + p.y * p.y);\n    if (rh > (2 * HALF_PI * this.a)) {\n      return;\n    }\n    z = rh / this.a;\n\n    sinz = Math.sin(z);\n    cosz = Math.cos(z);\n\n    lon = this.long0;\n    if (Math.abs(rh) <= EPSLN) {\n      lat = this.lat0;\n    }\n    else {\n      lat = asinz(cosz * this.sin_p12 + (p.y * sinz * this.cos_p12) / rh);\n      con = Math.abs(this.lat0) - HALF_PI;\n      if (Math.abs(con) <= EPSLN) {\n        if (this.lat0 >= 0) {\n          lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n        }\n        else {\n          lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n        }\n      }\n      else {\n        /*con = cosz - this.sin_p12 * Math.sin(lat);\n        if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {\n          //no-op, just keep the lon value as is\n        } else {\n          var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));\n          lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));\n        }*/\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));\n      }\n    }\n\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = Mlp - rh;\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = rh - Mlp;\n\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    else {\n      //default case\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      Az = Math.atan2(p.x, p.y);\n      N1 = gN(this.a, this.e, this.sin_p12);\n      cosAz = Math.cos(Az);\n      tmp = this.e * this.cos_p12 * cosAz;\n      A = -tmp * tmp / (1 - this.es);\n      B = 3 * this.es * (1 - A) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);\n      D = rh / N1;\n      Ee = D - A * (1 + A) * Math.pow(D, 3) / 6 - B * (1 + 3 * A) * Math.pow(D, 4) / 24;\n      F = 1 - A * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;\n      psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);\n      lon = adjust_lon(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));\n      sinpsi = Math.sin(psi);\n      lat = Math.atan2((sinpsi - this.es * F * this.sin_p12) * Math.tan(psi), sinpsi * (1 - this.es));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n  }\n\n}\n\nexport var names = [\"Azimuthal_Equidistant\", \"aeqd\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nexport function init() {\n  //double temp;      /* temporary variable    */\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n}\n\n/* Orthographic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g, x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.a * ksp * cosphi * Math.sin(dlon);\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* height above ellipsoid      */\n  var z; /* angle          */\n  var sinz, cosz; /* sin of z and cos of z      */\n  var con;\n  var lon, lat;\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  z = asinz(rh / this.a);\n\n  sinz = Math.sin(z);\n  cosz = Math.cos(z);\n\n  lon = this.long0;\n  if (Math.abs(rh) <= EPSLN) {\n    lat = this.lat0;\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lat = asinz(cosz * this.sin_p14 + (p.y * sinz * this.cos_p14) / rh);\n  con = Math.abs(this.lat0) - HALF_PI;\n  if (Math.abs(con) <= EPSLN) {\n    if (this.lat0 >= 0) {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n    }\n    else {\n      lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz), rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"ortho\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "// QSC projection rewritten from the original PROJ4\n// https://github.com/OSGeo/proj.4/blob/master/src/PJ_qsc.c\n\nimport {EPSLN, TWO_PI, SPI, HALF_PI, FORTPI} from '../constants/values';\n\n/* constants */\nvar FACE_ENUM = {\n    FRONT: 1,\n    RIGHT: 2,\n    BACK: 3,\n    LEFT: 4,\n    TOP: 5,\n    BOTTOM: 6\n};\n\nvar AREA_ENUM = {\n    AREA_0: 1,\n    AREA_1: 2,\n    AREA_2: 3,\n    AREA_3: 4\n};\n\nexport function init() {\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.lat_ts = this.lat_ts || 0;\n  this.title = this.title || \"Quadrilateralized Spherical Cube\";\n\n  /* Determine the cube face from the center of projection. */\n  if (this.lat0 >= HALF_PI - FORTPI / 2.0) {\n    this.face = FACE_ENUM.TOP;\n  } else if (this.lat0 <= -(HALF_PI - FORTPI / 2.0)) {\n    this.face = FACE_ENUM.BOTTOM;\n  } else if (Math.abs(this.long0) <= FORTPI) {\n    this.face = FACE_ENUM.FRONT;\n  } else if (Math.abs(this.long0) <= HALF_PI + FORTPI) {\n    this.face = this.long0 > 0.0 ? FACE_ENUM.RIGHT : FACE_ENUM.LEFT;\n  } else {\n    this.face = FACE_ENUM.BACK;\n  }\n\n  /* Fill in useful values for the ellipsoid <-> sphere shift\n   * described in [LK12]. */\n  if (this.es !== 0) {\n    this.one_minus_f = 1 - (this.a - this.b) / this.a;\n    this.one_minus_f_squared = this.one_minus_f * this.one_minus_f;\n  }\n}\n\n// QSC forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n  var xy = {x: 0, y: 0};\n  var lat, lon;\n  var theta, phi;\n  var t, mu;\n  /* nu; */\n  var area = {value: 0};\n\n  // move lon according to projection's lon\n  p.x -= this.long0;\n\n  /* Convert the geodetic latitude to a geocentric latitude.\n   * This corresponds to the shift from the ellipsoid to the sphere\n   * described in [LK12]. */\n  if (this.es !== 0) {//if (P->es != 0) {\n    lat = Math.atan(this.one_minus_f_squared * Math.tan(p.y));\n  } else {\n    lat = p.y;\n  }\n\n  /* Convert the input lat, lon into theta, phi as used by QSC.\n   * This depends on the cube face and the area on it.\n   * For the top and bottom face, we can compute theta and phi\n   * directly from phi, lam. For the other faces, we must use\n   * unit sphere cartesian coordinates as an intermediate step. */\n  lon = p.x; //lon = lp.lam;\n  if (this.face === FACE_ENUM.TOP) {\n    phi = HALF_PI - lat;\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n      theta = lon - HALF_PI;\n    } else if (lon > HALF_PI + FORTPI || lon <= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_1;\n      theta = (lon > 0.0 ? lon - SPI : lon + SPI);\n    } else if (lon > -(HALF_PI + FORTPI) && lon <= -FORTPI) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = lon + HALF_PI;\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta = lon;\n    }\n  } else if (this.face === FACE_ENUM.BOTTOM) {\n    phi = HALF_PI + lat;\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n      theta = -lon + HALF_PI;\n    } else if (lon < FORTPI && lon >= -FORTPI) {\n      area.value = AREA_ENUM.AREA_1;\n      theta = -lon;\n    } else if (lon < -FORTPI && lon >= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = -lon - HALF_PI;\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta = (lon > 0.0 ? -lon + SPI : -lon - SPI);\n    }\n  } else {\n    var q, r, s;\n    var sinlat, coslat;\n    var sinlon, coslon;\n\n    if (this.face === FACE_ENUM.RIGHT) {\n      lon = qsc_shift_lon_origin(lon, +HALF_PI);\n    } else if (this.face === FACE_ENUM.BACK) {\n      lon = qsc_shift_lon_origin(lon, +SPI);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      lon = qsc_shift_lon_origin(lon, -HALF_PI);\n    }\n    sinlat = Math.sin(lat);\n    coslat = Math.cos(lat);\n    sinlon = Math.sin(lon);\n    coslon = Math.cos(lon);\n    q = coslat * coslon;\n    r = coslat * sinlon;\n    s = sinlat;\n\n    if (this.face === FACE_ENUM.FRONT) {\n      phi = Math.acos(q);\n      theta = qsc_fwd_equat_face_theta(phi, s, r, area);\n    } else if (this.face === FACE_ENUM.RIGHT) {\n      phi = Math.acos(r);\n      theta = qsc_fwd_equat_face_theta(phi, s, -q, area);\n    } else if (this.face === FACE_ENUM.BACK) {\n      phi = Math.acos(-q);\n      theta = qsc_fwd_equat_face_theta(phi, s, -r, area);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      phi = Math.acos(-r);\n      theta = qsc_fwd_equat_face_theta(phi, s, q, area);\n    } else {\n      /* Impossible */\n      phi = theta = 0;\n      area.value = AREA_ENUM.AREA_0;\n    }\n  }\n\n  /* Compute mu and nu for the area of definition.\n   * For mu, see Eq. (3-21) in [OL76], but note the typos:\n   * compare with Eq. (3-14). For nu, see Eq. (3-38). */\n  mu = Math.atan((12 / SPI) * (theta + Math.acos(Math.sin(theta) * Math.cos(FORTPI)) - HALF_PI));\n  t = Math.sqrt((1 - Math.cos(phi)) / (Math.cos(mu) * Math.cos(mu)) / (1 - Math.cos(Math.atan(1 / Math.cos(theta)))));\n\n  /* Apply the result to the real area. */\n  if (area.value === AREA_ENUM.AREA_1) {\n    mu += HALF_PI;\n  } else if (area.value === AREA_ENUM.AREA_2) {\n    mu += SPI;\n  } else if (area.value === AREA_ENUM.AREA_3) {\n    mu += 1.5 * SPI;\n  }\n\n  /* Now compute x, y from mu and nu */\n  xy.x = t * Math.cos(mu);\n  xy.y = t * Math.sin(mu);\n  xy.x = xy.x * this.a + this.x0;\n  xy.y = xy.y * this.a + this.y0;\n\n  p.x = xy.x;\n  p.y = xy.y;\n  return p;\n}\n\n// QSC inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n  var lp = {lam: 0, phi: 0};\n  var mu, nu, cosmu, tannu;\n  var tantheta, theta, cosphi, phi;\n  var t;\n  var area = {value: 0};\n\n  /* de-offset */\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  /* Convert the input x, y to the mu and nu angles as used by QSC.\n   * This depends on the area of the cube face. */\n  nu = Math.atan(Math.sqrt(p.x * p.x + p.y * p.y));\n  mu = Math.atan2(p.y, p.x);\n  if (p.x >= 0.0 && p.x >= Math.abs(p.y)) {\n    area.value = AREA_ENUM.AREA_0;\n  } else if (p.y >= 0.0 && p.y >= Math.abs(p.x)) {\n    area.value = AREA_ENUM.AREA_1;\n    mu -= HALF_PI;\n  } else if (p.x < 0.0 && -p.x >= Math.abs(p.y)) {\n    area.value = AREA_ENUM.AREA_2;\n    mu = (mu < 0.0 ? mu + SPI : mu - SPI);\n  } else {\n    area.value = AREA_ENUM.AREA_3;\n    mu += HALF_PI;\n  }\n\n  /* Compute phi and theta for the area of definition.\n   * The inverse projection is not described in the original paper, but some\n   * good hints can be found here (as of 2011-12-14):\n   * http://fits.gsfc.nasa.gov/fitsbits/saf.93/saf.9302\n   * (search for \"Message-Id: <9302181759.AA25477 at fits.cv.nrao.edu>\") */\n  t = (SPI / 12) * Math.tan(mu);\n  tantheta = Math.sin(t) / (Math.cos(t) - (1 / Math.sqrt(2)));\n  theta = Math.atan(tantheta);\n  cosmu = Math.cos(mu);\n  tannu = Math.tan(nu);\n  cosphi = 1 - cosmu * cosmu * tannu * tannu * (1 - Math.cos(Math.atan(1 / Math.cos(theta))));\n  if (cosphi < -1) {\n    cosphi = -1;\n  } else if (cosphi > +1) {\n    cosphi = +1;\n  }\n\n  /* Apply the result to the real area on the cube face.\n   * For the top and bottom face, we can compute phi and lam directly.\n   * For the other faces, we must use unit sphere cartesian coordinates\n   * as an intermediate step. */\n  if (this.face === FACE_ENUM.TOP) {\n    phi = Math.acos(cosphi);\n    lp.phi = HALF_PI - phi;\n    if (area.value === AREA_ENUM.AREA_0) {\n      lp.lam = theta + HALF_PI;\n    } else if (area.value === AREA_ENUM.AREA_1) {\n      lp.lam = (theta < 0.0 ? theta + SPI : theta - SPI);\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      lp.lam = theta - HALF_PI;\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\n      lp.lam = theta;\n    }\n  } else if (this.face === FACE_ENUM.BOTTOM) {\n    phi = Math.acos(cosphi);\n    lp.phi = phi - HALF_PI;\n    if (area.value === AREA_ENUM.AREA_0) {\n      lp.lam = -theta + HALF_PI;\n    } else if (area.value === AREA_ENUM.AREA_1) {\n      lp.lam = -theta;\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      lp.lam = -theta - HALF_PI;\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\n      lp.lam = (theta < 0.0 ? -theta - SPI : -theta + SPI);\n    }\n  } else {\n    /* Compute phi and lam via cartesian unit sphere coordinates. */\n    var q, r, s;\n    q = cosphi;\n    t = q * q;\n    if (t >= 1) {\n      s = 0;\n    } else {\n      s = Math.sqrt(1 - t) * Math.sin(theta);\n    }\n    t += s * s;\n    if (t >= 1) {\n      r = 0;\n    } else {\n      r = Math.sqrt(1 - t);\n    }\n    /* Rotate q,r,s into the correct area. */\n    if (area.value === AREA_ENUM.AREA_1) {\n      t = r;\n      r = -s;\n      s = t;\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      r = -r;\n      s = -s;\n    } else if (area.value === AREA_ENUM.AREA_3) {\n      t = r;\n      r = s;\n      s = -t;\n    }\n    /* Rotate q,r,s into the correct cube face. */\n    if (this.face === FACE_ENUM.RIGHT) {\n      t = q;\n      q = -r;\n      r = t;\n    } else if (this.face === FACE_ENUM.BACK) {\n      q = -q;\n      r = -r;\n    } else if (this.face === FACE_ENUM.LEFT) {\n      t = q;\n      q = r;\n      r = -t;\n    }\n    /* Now compute phi and lam from the unit sphere coordinates. */\n    lp.phi = Math.acos(-s) - HALF_PI;\n    lp.lam = Math.atan2(r, q);\n    if (this.face === FACE_ENUM.RIGHT) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, -HALF_PI);\n    } else if (this.face === FACE_ENUM.BACK) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, -SPI);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, +HALF_PI);\n    }\n  }\n\n  /* Apply the shift from the sphere to the ellipsoid as described\n   * in [LK12]. */\n  if (this.es !== 0) {\n    var invert_sign;\n    var tanphi, xa;\n    invert_sign = (lp.phi < 0 ? 1 : 0);\n    tanphi = Math.tan(lp.phi);\n    xa = this.b / Math.sqrt(tanphi * tanphi + this.one_minus_f_squared);\n    lp.phi = Math.atan(Math.sqrt(this.a * this.a - xa * xa) / (this.one_minus_f * xa));\n    if (invert_sign) {\n      lp.phi = -lp.phi;\n    }\n  }\n\n  lp.lam += this.long0;\n  p.x = lp.lam;\n  p.y = lp.phi;\n  return p;\n}\n\n/* Helper function for forward projection: compute the theta angle\n * and determine the area number. */\nfunction qsc_fwd_equat_face_theta(phi, y, x, area) {\n  var theta;\n  if (phi < EPSLN) {\n    area.value = AREA_ENUM.AREA_0;\n    theta = 0.0;\n  } else {\n    theta = Math.atan2(y, x);\n    if (Math.abs(theta) <= FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n    } else if (theta > FORTPI && theta <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_1;\n      theta -= HALF_PI;\n    } else if (theta > HALF_PI + FORTPI || theta <= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = (theta >= 0.0 ? theta - SPI : theta + SPI);\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta += HALF_PI;\n    }\n  }\n  return theta;\n}\n\n/* Helper function: shift the longitude. */\nfunction qsc_shift_lon_origin(lon, offset) {\n  var slon = lon + offset;\n  if (slon < -SPI) {\n    slon += TWO_PI;\n  } else if (slon > +SPI) {\n    slon -= TWO_PI;\n  }\n  return slon;\n}\n\nexport var names = [\"Quadrilateralized Spherical Cube\", \"Quadrilateralized_Spherical_Cube\", \"qsc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n\n", "// Robinson projection\n// Based on https://github.com/OSGeo/proj.4/blob/master/src/PJ_robin.c\n// Polynomial coeficients from http://article.gmane.org/gmane.comp.gis.proj-4.devel/6039\n\nimport {HALF_PI, D2R, R2D, EPSLN} from '../constants/values';\nimport adjust_lon from '../common/adjust_lon';\n\nvar COEFS_X = [\n    [1.0000, 2.2199e-17, -7.15515e-05, 3.1103e-06],\n    [0.9986, -0.000482243, -2.4897e-05, -1.3309e-06],\n    [0.9954, -0.00083103, -4.48605e-05, -9.86701e-07],\n    [0.9900, -0.00135364, -5.9661e-05, 3.6777e-06],\n    [0.9822, -0.00167442, -4.49547e-06, -5.72411e-06],\n    [0.9730, -0.00214868, -9.03571e-05, 1.8736e-08],\n    [0.9600, -0.00305085, -9.00761e-05, 1.64917e-06],\n    [0.9427, -0.00382792, -6.53386e-05, -2.6154e-06],\n    [0.9216, -0.00467746, -0.00010457, 4.81243e-06],\n    [0.8962, -0.00536223, -3.23831e-05, -5.43432e-06],\n    [0.8679, -0.00609363, -0.000113898, 3.32484e-06],\n    [0.8350, -0.00698325, -6.40253e-05, 9.34959e-07],\n    [0.7986, -0.00755338, -5.00009e-05, 9.35324e-07],\n    [0.7597, -0.00798324, -3.5971e-05, -2.27626e-06],\n    [0.7186, -0.00851367, -7.01149e-05, -8.6303e-06],\n    [0.6732, -0.00986209, -0.000199569, 1.91974e-05],\n    [0.6213, -0.010418, 8.83923e-05, 6.24051e-06],\n    [0.5722, -0.00906601, 0.000182, 6.24051e-06],\n    [0.5322, -0.00677797, 0.000275608, 6.24051e-06]\n];\n\nvar COEFS_Y = [\n    [-5.20417e-18, 0.0124, 1.21431e-18, -8.45284e-11],\n    [0.0620, 0.0124, -1.26793e-09, 4.22642e-10],\n    [0.1240, 0.0124, 5.07171e-09, -1.60604e-09],\n    [0.1860, 0.0123999, -1.90189e-08, 6.00152e-09],\n    [0.2480, 0.0124002, 7.10039e-08, -2.24e-08],\n    [0.3100, 0.0123992, -2.64997e-07, 8.35986e-08],\n    [0.3720, 0.0124029, 9.88983e-07, -3.11994e-07],\n    [0.4340, 0.0123893, -3.69093e-06, -4.35621e-07],\n    [0.4958, 0.0123198, -1.02252e-05, -3.45523e-07],\n    [0.5571, 0.0121916, -1.54081e-05, -5.82288e-07],\n    [0.6176, 0.0119938, -2.41424e-05, -5.25327e-07],\n    [0.6769, 0.011713, -3.20223e-05, -5.16405e-07],\n    [0.7346, 0.0113541, -3.97684e-05, -6.09052e-07],\n    [0.7903, 0.0109107, -4.89042e-05, -1.04739e-06],\n    [0.8435, 0.0103431, -6.4615e-05, -1.40374e-09],\n    [0.8936, 0.00969686, -6.4636e-05, -8.547e-06],\n    [0.9394, 0.00840947, -0.000192841, -4.2106e-06],\n    [0.9761, 0.00616527, -0.000256, -4.2106e-06],\n    [1.0000, 0.00328947, -0.000319159, -4.2106e-06]\n];\n\nvar FXC = 0.8487;\nvar FYC = 1.3523;\nvar C1 = R2D/5; // rad to 5-degree interval\nvar RC1 = 1/C1;\nvar NODES = 18;\n\nvar poly3_val = function(coefs, x) {\n    return coefs[0] + x * (coefs[1] + x * (coefs[2] + x * coefs[3]));\n};\n\nvar poly3_der = function(coefs, x) {\n    return coefs[1] + x * (2 * coefs[2] + x * 3 * coefs[3]);\n};\n\nfunction newton_rapshon(f_df, start, max_err, iters) {\n    var x = start;\n    for (; iters; --iters) {\n        var upd = f_df(x);\n        x -= upd;\n        if (Math.abs(upd) < max_err) {\n            break;\n        }\n    }\n    return x;\n}\n\nexport function init() {\n    this.x0 = this.x0 || 0;\n    this.y0 = this.y0 || 0;\n    this.long0 = this.long0 || 0;\n    this.es = 0;\n    this.title = this.title || \"Robinson\";\n}\n\nexport function forward(ll) {\n    var lon = adjust_lon(ll.x - this.long0);\n\n    var dphi = Math.abs(ll.y);\n    var i = Math.floor(dphi * C1);\n    if (i < 0) {\n        i = 0;\n    } else if (i >= NODES) {\n        i = NODES - 1;\n    }\n    dphi = R2D * (dphi - RC1 * i);\n    var xy = {\n        x: poly3_val(COEFS_X[i], dphi) * lon,\n        y: poly3_val(COEFS_Y[i], dphi)\n    };\n    if (ll.y < 0) {\n        xy.y = -xy.y;\n    }\n\n    xy.x = xy.x * this.a * FXC + this.x0;\n    xy.y = xy.y * this.a * FYC + this.y0;\n    return xy;\n}\n\nexport function inverse(xy) {\n    var ll = {\n        x: (xy.x - this.x0) / (this.a * FXC),\n        y: Math.abs(xy.y - this.y0) / (this.a * FYC)\n    };\n\n    if (ll.y >= 1) { // pathologic case\n        ll.x /= COEFS_X[NODES][0];\n        ll.y = xy.y < 0 ? -HALF_PI : HALF_PI;\n    } else {\n        // find table interval\n        var i = Math.floor(ll.y * NODES);\n        if (i < 0) {\n            i = 0;\n        } else if (i >= NODES) {\n            i = NODES - 1;\n        }\n        for (;;) {\n            if (COEFS_Y[i][0] > ll.y) {\n                --i;\n            } else if (COEFS_Y[i+1][0] <= ll.y) {\n                ++i;\n            } else {\n                break;\n            }\n        }\n        // linear interpolation in 5 degree interval\n        var coefs = COEFS_Y[i];\n        var t = 5 * (ll.y - coefs[0]) / (COEFS_Y[i+1][0] - coefs[0]);\n        // find t so that poly3_val(coefs, t) = ll.y\n        t = newton_rapshon(function(x) {\n            return (poly3_val(coefs, x) - ll.y) / poly3_der(coefs, x);\n        }, t, EPSLN, 100);\n\n        ll.x /= poly3_val(COEFS_X[i], t);\n        ll.y = (5 * i + t) * D2R;\n        if (xy.y < 0) {\n            ll.y = -ll.y;\n        }\n    }\n\n    ll.x = adjust_lon(ll.x + this.long0);\n    return ll;\n}\n\nexport var names = [\"Robinson\", \"robin\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "'use strict';\nimport {PJD_3PARAM, PJD_7PARAM, HALF_PI} from './constants/values';\nexport function compareDatums(source, dest) {\n  if (source.datum_type !== dest.datum_type) {\n    return false; // false, datums are not equal\n  } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 0.000000000050) {\n    // the tolerance for es is to ensure that GRS80 and WGS84\n    // are considered identical\n    return false;\n  } else if (source.datum_type === PJD_3PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2]);\n  } else if (source.datum_type === PJD_7PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6]);\n  } else {\n    return true; // datums are equal\n  }\n} // cs_compare_datums()\n\n/*\n * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates\n * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),\n * according to the current ellipsoid parameters.\n *\n *    Latitude  : Geodetic latitude in radians                     (input)\n *    Longitude : Geodetic longitude in radians                    (input)\n *    Height    : Geodetic height, in meters                       (input)\n *    X         : Calculated Geocentric X coordinate, in meters    (output)\n *    Y         : Calculated Geocentric Y coordinate, in meters    (output)\n *    Z         : Calculated Geocentric Z coordinate, in meters    (output)\n *\n */\nexport function geodeticToGeocentric(p, es, a) {\n  var Longitude = p.x;\n  var Latitude = p.y;\n  var Height = p.z ? p.z : 0; //Z value not always supplied\n\n  var Rn; /*  Earth radius at location  */\n  var Sin_Lat; /*  Math.sin(Latitude)  */\n  var Sin2_Lat; /*  Square of Math.sin(Latitude)  */\n  var Cos_Lat; /*  Math.cos(Latitude)  */\n\n  /*\n   ** Don't blow up if Latitude is just a little out of the value\n   ** range as it may just be a rounding issue.  Also removed longitude\n   ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.\n   */\n  if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {\n    Latitude = -HALF_PI;\n  } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {\n    Latitude = HALF_PI;\n  } else if (Latitude < -HALF_PI) {\n    /* Latitude out of range */\n    //..reportError('geocent:lat out of range:' + Latitude);\n    return { x: -Infinity, y: -Infinity, z: p.z };\n  } else if (Latitude > HALF_PI) {\n    /* Latitude out of range */\n    return { x: Infinity, y: Infinity, z: p.z };\n  }\n\n  if (Longitude > Math.PI) {\n    Longitude -= (2 * Math.PI);\n  }\n  Sin_Lat = Math.sin(Latitude);\n  Cos_Lat = Math.cos(Latitude);\n  Sin2_Lat = Sin_Lat * Sin_Lat;\n  Rn = a / (Math.sqrt(1.0e0 - es * Sin2_Lat));\n  return {\n    x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),\n    y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),\n    z: ((Rn * (1 - es)) + Height) * Sin_Lat\n  };\n} // cs_geodetic_to_geocentric()\n\nexport function geocentricToGeodetic(p, es, a, b) {\n  /* local defintions and variables */\n  /* end-criterium of loop, accuracy of sin(Latitude) */\n  var genau = 1e-12;\n  var genau2 = (genau * genau);\n  var maxiter = 30;\n\n  var P; /* distance between semi-minor axis and location */\n  var RR; /* distance between center and location */\n  var CT; /* sin of geocentric latitude */\n  var ST; /* cos of geocentric latitude */\n  var RX;\n  var RK;\n  var RN; /* Earth radius at location */\n  var CPHI0; /* cos of start or old geodetic latitude in iterations */\n  var SPHI0; /* sin of start or old geodetic latitude in iterations */\n  var CPHI; /* cos of searched geodetic latitude */\n  var SPHI; /* sin of searched geodetic latitude */\n  var SDPHI; /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */\n  var iter; /* # of continous iteration, max. 30 is always enough (s.a.) */\n\n  var X = p.x;\n  var Y = p.y;\n  var Z = p.z ? p.z : 0.0; //Z value not always supplied\n  var Longitude;\n  var Latitude;\n  var Height;\n\n  P = Math.sqrt(X * X + Y * Y);\n  RR = Math.sqrt(X * X + Y * Y + Z * Z);\n\n  /*      special cases for latitude and longitude */\n  if (P / a < genau) {\n\n    /*  special case, if P=0. (X=0., Y=0.) */\n    Longitude = 0.0;\n\n    /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis\n     *  of ellipsoid (=center of mass), Latitude becomes PI/2 */\n    if (RR / a < genau) {\n      Latitude = HALF_PI;\n      Height = -b;\n      return {\n        x: p.x,\n        y: p.y,\n        z: p.z\n      };\n    }\n  } else {\n    /*  ellipsoidal (geodetic) longitude\n     *  interval: -PI < Longitude <= +PI */\n    Longitude = Math.atan2(Y, X);\n  }\n\n  /* --------------------------------------------------------------\n   * Following iterative algorithm was developped by\n   * \"Institut for Erdmessung\", University of Hannover, July 1988.\n   * Internet: www.ife.uni-hannover.de\n   * Iterative computation of CPHI,SPHI and Height.\n   * Iteration of CPHI and SPHI to 10**-12 radian resp.\n   * 2*10**-7 arcsec.\n   * --------------------------------------------------------------\n   */\n  CT = Z / RR;\n  ST = P / RR;\n  RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);\n  CPHI0 = ST * (1.0 - es) * RX;\n  SPHI0 = CT * RX;\n  iter = 0;\n\n  /* loop to find sin(Latitude) resp. Latitude\n   * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */\n  do {\n    iter++;\n    RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);\n\n    /*  ellipsoidal (geodetic) height */\n    Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);\n\n    RK = es * RN / (RN + Height);\n    RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);\n    CPHI = ST * (1.0 - RK) * RX;\n    SPHI = CT * RX;\n    SDPHI = SPHI * CPHI0 - CPHI * SPHI0;\n    CPHI0 = CPHI;\n    SPHI0 = SPHI;\n  }\n  while (SDPHI * SDPHI > genau2 && iter < maxiter);\n\n  /*      ellipsoidal (geodetic) latitude */\n  Latitude = Math.atan(SPHI / Math.abs(CPHI));\n  return {\n    x: Longitude,\n    y: Latitude,\n    z: Height\n  };\n} // cs_geocentric_to_geodetic()\n\n/****************************************************************/\n// pj_geocentic_to_wgs84( p )\n//  p = point to transform in geocentric coordinates (x,y,z)\n\n\n/** point object, nothing fancy, just allows values to be\n    passed back and forth by reference rather than by value.\n    Other point classes may be used as long as they have\n    x and y properties, which will get modified in the transform method.\n*/\nexport function geocentricToWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x + datum_params[0],\n      y: p.y + datum_params[1],\n      z: p.z + datum_params[2],\n    };\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,\n      y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,\n      z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF\n    };\n  }\n} // cs_geocentric_to_wgs84\n\n/****************************************************************/\n// pj_geocentic_from_wgs84()\n//  coordinate system definition,\n//  point to transform in geocentric coordinates (x,y,z)\nexport function geocentricFromWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x - datum_params[0],\n      y: p.y - datum_params[1],\n      z: p.z - datum_params[2],\n    };\n\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    var x_tmp = (p.x - Dx_BF) / M_BF;\n    var y_tmp = (p.y - Dy_BF) / M_BF;\n    var z_tmp = (p.z - Dz_BF) / M_BF;\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n\n    return {\n      x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,\n      y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,\n      z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp\n    };\n  } //cs_geocentric_from_wgs84()\n}\n", "import {\n    geodeticToGeocentric,\n    geocentricToGeodetic\n} from '../datumUtils';\n\nexport function init() {\n    this.name = 'geocent';\n\n}\n\nexport function forward(p) {\n    var point = geodeticToGeocentric(p, this.es, this.a);\n    return point;\n}\n\nexport function inverse(p) {\n    var point = geocentricToGeodetic(p, this.es, this.a, this.b);\n    return point;\n}\n\nexport var names = [\"Geocentric\", 'geocentric', \"geocent\", \"Geocent\"];\nexport default {\n    init: init,\n    forward: forward,\n    inverse: inverse,\n    names: names\n};", "\nvar mode = {\n  N_POLE: 0,\n  S_POLE: 1,\n  EQUIT: 2,\n  OBLIQ: 3\n};\n\nimport { D2R, HALF_PI, EPSLN } from \"../constants/values\";\nimport hypot from \"../common/hypot\";\n\nvar params = {\n  h:     { def: 100000, num: true },           // default is Karman line, no default in PROJ.7\n  azi:   { def: 0, num: true, degrees: true }, // default is North\n  tilt:  { def: 0, num: true, degrees: true }, // default is Nadir\n  long0: { def: 0, num: true },                // default is Greenwich, conversion to rad is automatic\n  lat0:  { def: 0, num: true }                 // default is Equator, conversion to rad is automatic\n};\n\nexport function init() {\n  Object.keys(params).forEach(function (p) {\n    if (typeof this[p] === \"undefined\") {\n      this[p] = params[p].def;\n    } else if (params[p].num && isNaN(this[p])) {\n      throw new Error(\"Invalid parameter value, must be numeric \" + p + \" = \" + this[p]);\n    } else if (params[p].num) {\n      this[p] = parseFloat(this[p]);\n    }\n    if (params[p].degrees) {\n      this[p] = this[p] * D2R;\n    }\n  }.bind(this));\n\n  if (Math.abs((Math.abs(this.lat0) - HALF_PI)) < EPSLN) {\n    this.mode = this.lat0 < 0 ? mode.S_POLE : mode.N_POLE;\n  } else if (Math.abs(this.lat0) < EPSLN) {\n    this.mode = mode.EQUIT;\n  } else {\n    this.mode = mode.OBLIQ;\n    this.sinph0 = Math.sin(this.lat0);\n    this.cosph0 = Math.cos(this.lat0);\n  }\n\n  this.pn1 = this.h / this.a;  // Normalize relative to the Earth's radius\n\n  if (this.pn1 <= 0 || this.pn1 > 1e10) {\n    throw new Error(\"Invalid height\");\n  }\n  \n  this.p = 1 + this.pn1;\n  this.rp = 1 / this.p;\n  this.h1 = 1 / this.pn1;\n  this.pfact = (this.p + 1) * this.h1;\n  this.es = 0;\n\n  var omega = this.tilt;\n  var gamma = this.azi;\n  this.cg = Math.cos(gamma);\n  this.sg = Math.sin(gamma);\n  this.cw = Math.cos(omega);\n  this.sw = Math.sin(omega);\n}\n\nexport function forward(p) {\n  p.x -= this.long0;\n  var sinphi = Math.sin(p.y);\n  var cosphi = Math.cos(p.y);\n  var coslam = Math.cos(p.x);\n  var x, y;\n  switch (this.mode) {\n    case mode.OBLIQ:\n      y = this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n      break;\n    case mode.EQUIT:\n      y = cosphi * coslam;\n      break;\n    case mode.S_POLE:\n      y = -sinphi;\n      break;\n    case mode.N_POLE:\n      y = sinphi;\n      break;\n  }\n  y = this.pn1 / (this.p - y);\n  x = y * cosphi * Math.sin(p.x);\n\n  switch (this.mode) {\n    case mode.OBLIQ:\n      y *= this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n      break;\n    case mode.EQUIT:\n      y *= sinphi;\n      break;\n    case mode.N_POLE:\n      y *= -(cosphi * coslam);\n      break;\n    case mode.S_POLE:\n      y *= cosphi * coslam;\n      break;\n  }\n\n  // Tilt \n  var yt, ba;\n  yt = y * this.cg + x * this.sg;\n  ba = 1 / (yt * this.sw * this.h1 + this.cw);\n  x = (x * this.cg - y * this.sg) * this.cw * ba;\n  y = yt * ba;\n\n  p.x = x * this.a;\n  p.y = y * this.a;\n  return p;\n}\n\nexport function inverse(p) {\n  p.x /= this.a;\n  p.y /= this.a;\n  var r = { x: p.x, y: p.y };\n\n  // Un-Tilt\n  var bm, bq, yt;\n  yt = 1 / (this.pn1 - p.y * this.sw);\n  bm = this.pn1 * p.x * yt;\n  bq = this.pn1 * p.y * this.cw * yt;\n  p.x = bm * this.cg + bq * this.sg;\n  p.y = bq * this.cg - bm * this.sg;\n\n  var rh = hypot(p.x, p.y);\n  if (Math.abs(rh) < EPSLN) {\n    r.x = 0;\n    r.y = p.y;\n  } else {\n    var cosz, sinz;\n    sinz = 1 - rh * rh * this.pfact;\n    sinz = (this.p - Math.sqrt(sinz)) / (this.pn1 / rh + rh / this.pn1);\n    cosz = Math.sqrt(1 - sinz * sinz);\n    switch (this.mode) {\n      case mode.OBLIQ:\n        r.y = Math.asin(cosz * this.sinph0 + p.y * sinz * this.cosph0 / rh);\n        p.y = (cosz - this.sinph0 * Math.sin(r.y)) * rh;\n        p.x *= sinz * this.cosph0;\n        break;\n      case mode.EQUIT:\n        r.y = Math.asin(p.y * sinz / rh);\n        p.y = cosz * rh;\n        p.x *= sinz;\n        break;\n      case mode.N_POLE:\n        r.y = Math.asin(cosz);\n        p.y = -p.y;\n        break;\n      case mode.S_POLE:\n        r.y = -Math.asin(cosz);\n        break;\n    }\n    r.x = Math.atan2(p.x, p.y);\n  }\n\n  p.x = r.x + this.long0;\n  p.y = r.y;\n  return p;\n}\n\nexport var names = [\"Tilted_Perspective\", \"tpers\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n", "import hypot from '../common/hypot';\n\nexport function init() {\n    this.flip_axis = (this.sweep === 'x' ? 1 : 0);\n    this.h = Number(this.h);\n    this.radius_g_1 = this.h / this.a;\n\n    if (this.radius_g_1 <= 0 || this.radius_g_1 > 1e10) {\n        throw new Error();\n    }\n\n    this.radius_g = 1.0 + this.radius_g_1;\n    this.C = this.radius_g * this.radius_g - 1.0;\n\n    if (this.es !== 0.0) {\n        var one_es = 1.0 - this.es;\n        var rone_es = 1 / one_es;\n\n        this.radius_p = Math.sqrt(one_es);\n        this.radius_p2 = one_es;\n        this.radius_p_inv2 = rone_es;\n\n        this.shape = 'ellipse'; // Use as a condition in the forward and inverse functions.\n    } else {\n        this.radius_p = 1.0;\n        this.radius_p2 = 1.0;\n        this.radius_p_inv2 = 1.0;\n\n        this.shape = 'sphere';  // Use as a condition in the forward and inverse functions.\n    }\n\n    if (!this.title) {\n        this.title = \"Geostationary Satellite View\";\n    }\n}\n\nfunction forward(p) {\n    var lon = p.x;\n    var lat = p.y;\n    var tmp, v_x, v_y, v_z;\n    lon = lon - this.long0;\n\n    if (this.shape === 'ellipse') {\n        lat = Math.atan(this.radius_p2 * Math.tan(lat));\n        var r = this.radius_p / hypot(this.radius_p * Math.cos(lat), Math.sin(lat));\n\n        v_x = r * Math.cos(lon) * Math.cos(lat);\n        v_y = r * Math.sin(lon) * Math.cos(lat);\n        v_z = r * Math.sin(lat);\n\n        if (((this.radius_g - v_x) * v_x - v_y * v_y - v_z * v_z * this.radius_p_inv2) < 0.0) {\n            p.x = Number.NaN;\n            p.y = Number.NaN;\n            return p;\n        }\n\n        tmp = this.radius_g - v_x;\n        if (this.flip_axis) {\n            p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));\n            p.y = this.radius_g_1 * Math.atan(v_z / tmp);\n        } else {\n            p.x = this.radius_g_1 * Math.atan(v_y / tmp);\n            p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));\n        }\n    } else if (this.shape === 'sphere') {\n        tmp = Math.cos(lat);\n        v_x = Math.cos(lon) * tmp;\n        v_y = Math.sin(lon) * tmp;\n        v_z = Math.sin(lat);\n        tmp = this.radius_g - v_x;\n\n        if (this.flip_axis) {\n            p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));\n            p.y = this.radius_g_1 * Math.atan(v_z / tmp);\n        } else {\n            p.x = this.radius_g_1 * Math.atan(v_y / tmp);\n            p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));\n        }\n    }\n    p.x = p.x * this.a;\n    p.y = p.y * this.a;\n    return p;\n}\n\nfunction inverse(p) {\n    var v_x = -1.0;\n    var v_y = 0.0;\n    var v_z = 0.0;\n    var a, b, det, k;\n\n    p.x = p.x / this.a;\n    p.y = p.y / this.a;\n\n    if (this.shape === 'ellipse') {\n        if (this.flip_axis) {\n            v_z = Math.tan(p.y / this.radius_g_1);\n            v_y = Math.tan(p.x / this.radius_g_1) * hypot(1.0, v_z);\n        } else {\n            v_y = Math.tan(p.x / this.radius_g_1);\n            v_z = Math.tan(p.y / this.radius_g_1) * hypot(1.0, v_y);\n        }\n\n        var v_zp = v_z / this.radius_p;\n        a = v_y * v_y + v_zp * v_zp + v_x * v_x;\n        b = 2 * this.radius_g * v_x;\n        det = (b * b) - 4 * a * this.C;\n\n        if (det < 0.0) {\n            p.x = Number.NaN;\n            p.y = Number.NaN;\n            return p;\n        }\n\n        k = (-b - Math.sqrt(det)) / (2.0 * a);\n        v_x = this.radius_g + k * v_x;\n        v_y *= k;\n        v_z *= k;\n\n        p.x = Math.atan2(v_y, v_x);\n        p.y = Math.atan(v_z * Math.cos(p.x) / v_x);\n        p.y = Math.atan(this.radius_p_inv2 * Math.tan(p.y));\n    } else if (this.shape === 'sphere') {\n        if (this.flip_axis) {\n            v_z = Math.tan(p.y / this.radius_g_1);\n            v_y = Math.tan(p.x / this.radius_g_1) * Math.sqrt(1.0 + v_z * v_z);\n        } else {\n            v_y = Math.tan(p.x / this.radius_g_1);\n            v_z = Math.tan(p.y / this.radius_g_1) * Math.sqrt(1.0 + v_y * v_y);\n        }\n\n        a = v_y * v_y + v_z * v_z + v_x * v_x;\n        b = 2 * this.radius_g * v_x;\n        det = (b * b) - 4 * a * this.C;\n        if (det < 0.0) {\n            p.x = Number.NaN;\n            p.y = Number.NaN;\n            return p;\n        }\n\n        k = (-b - Math.sqrt(det)) / (2.0 * a);\n        v_x = this.radius_g + k * v_x;\n        v_y *= k;\n        v_z *= k;\n\n        p.x = Math.atan2(v_y, v_x);\n        p.y = Math.atan(v_z * Math.cos(p.x) / v_x);\n    }\n    p.x = p.x + this.long0;\n    return p;\n}\n\nexport var names = [\"Geostationary Satellite View\", \"Geostationary_Satellite\", \"geos\"];\nexport default {\n    init: init,\n    forward: forward,\n    inverse: inverse,\n    names: names,\n};\n\n", "import tmerc from './lib/projections/tmerc';\nimport etmerc from './lib/projections/etmerc';\nimport utm from './lib/projections/utm';\nimport sterea from './lib/projections/sterea';\nimport stere from './lib/projections/stere';\nimport somerc from './lib/projections/somerc';\nimport omerc from './lib/projections/omerc';\nimport lcc from './lib/projections/lcc';\nimport krovak from './lib/projections/krovak';\nimport cass from './lib/projections/cass';\nimport laea from './lib/projections/laea';\nimport aea from './lib/projections/aea';\nimport gnom from './lib/projections/gnom';\nimport cea from './lib/projections/cea';\nimport eqc from './lib/projections/eqc';\nimport poly from './lib/projections/poly';\nimport nzmg from './lib/projections/nzmg';\nimport mill from './lib/projections/mill';\nimport sinu from './lib/projections/sinu';\nimport moll from './lib/projections/moll';\nimport eqdc from './lib/projections/eqdc';\nimport vandg from './lib/projections/vandg';\nimport aeqd from './lib/projections/aeqd';\nimport ortho from './lib/projections/ortho';\nimport qsc from './lib/projections/qsc';\nimport robin from './lib/projections/robin';\nimport geocent from './lib/projections/geocent';\nimport tpers from './lib/projections/tpers';\nimport geos from './lib/projections/geos';\nexport default function(proj4){\n  proj4.Proj.projections.add(tmerc);\n  proj4.Proj.projections.add(etmerc);\n  proj4.Proj.projections.add(utm);\n  proj4.Proj.projections.add(sterea);\n  proj4.Proj.projections.add(stere);\n  proj4.Proj.projections.add(somerc);\n  proj4.Proj.projections.add(omerc);\n  proj4.Proj.projections.add(lcc);\n  proj4.Proj.projections.add(krovak);\n  proj4.Proj.projections.add(cass);\n  proj4.Proj.projections.add(laea);\n  proj4.Proj.projections.add(aea);\n  proj4.Proj.projections.add(gnom);\n  proj4.Proj.projections.add(cea);\n  proj4.Proj.projections.add(eqc);\n  proj4.Proj.projections.add(poly);\n  proj4.Proj.projections.add(nzmg);\n  proj4.Proj.projections.add(mill);\n  proj4.Proj.projections.add(sinu);\n  proj4.Proj.projections.add(moll);\n  proj4.Proj.projections.add(eqdc);\n  proj4.Proj.projections.add(vandg);\n  proj4.Proj.projections.add(aeqd);\n  proj4.Proj.projections.add(ortho);\n  proj4.Proj.projections.add(qsc);\n  proj4.Proj.projections.add(robin);\n  proj4.Proj.projections.add(geocent);\n  proj4.Proj.projections.add(tpers);\n  proj4.Proj.projections.add(geos);\n}"],
  "mappings": "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",
  "names": ["init", "forward", "inverse", "names", "init", "names", "MAX_ITER", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "MAX_ITER", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "MAX_ITER", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names", "init", "forward", "inverse", "names"]
}
